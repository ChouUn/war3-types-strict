/** @noSelfInFile */

/// <reference path="./base.d.ts" />

// ==================
// ==== POINTERS ====
// ==================

// =================
// ==== GLOBALS ====
// =================
declare const bj_ALLIANCE_ALLIED: integer;
declare const bj_ALLIANCE_ALLIED_ADVUNITS: integer;
declare const bj_ALLIANCE_ALLIED_UNITS: integer;
declare const bj_ALLIANCE_ALLIED_VISION: integer;
declare const bj_ALLIANCE_NEUTRAL: integer;
declare const bj_ALLIANCE_NEUTRAL_VISION: integer;
declare const bj_ALLIANCE_UNALLIED: integer;
declare const bj_ALLIANCE_UNALLIED_VISION: integer;
declare const bj_BUFF_POLARITY_EITHER: integer;
declare const bj_BUFF_POLARITY_NEGATIVE: integer;
declare const bj_BUFF_POLARITY_POSITIVE: integer;
declare const bj_BUFF_RESIST_BOTH: integer;
declare const bj_BUFF_RESIST_EITHER: integer;
declare const bj_BUFF_RESIST_MAGIC: integer;
declare const bj_BUFF_RESIST_PHYSICAL: integer;
declare const bj_CAMERABOUNDS_ADJUST_ADD: integer;
declare const bj_CAMERABOUNDS_ADJUST_SUB: integer;
declare const bj_CAMERA_DEFAULT_AOA: integer;
declare const bj_CAMERA_DEFAULT_DISTANCE: integer;
declare const bj_CAMERA_DEFAULT_FARZ: integer;
declare const bj_CAMERA_DEFAULT_FOV: integer;
declare const bj_CAMERA_DEFAULT_ROLL: integer;
declare const bj_CAMERA_DEFAULT_ROTATION: integer;
declare const bj_CAMERA_MIN_FARZ: integer;
declare const bj_CAMPAIGN_INDEX_H: integer;
declare const bj_CAMPAIGN_INDEX_N: integer;
declare const bj_CAMPAIGN_INDEX_O: integer;
declare const bj_CAMPAIGN_INDEX_T: integer;
declare const bj_CAMPAIGN_INDEX_U: integer;
declare const bj_CAMPAIGN_INDEX_XH: integer;
declare const bj_CAMPAIGN_INDEX_XN: integer;
declare const bj_CAMPAIGN_INDEX_XO: integer;
declare const bj_CAMPAIGN_INDEX_XU: integer;
declare const bj_CAMPAIGN_OFFSET_H: integer;
declare const bj_CAMPAIGN_OFFSET_N: integer;
declare const bj_CAMPAIGN_OFFSET_O: integer;
declare const bj_CAMPAIGN_OFFSET_T: integer;
declare const bj_CAMPAIGN_OFFSET_U: integer;
declare const bj_CAMPAIGN_OFFSET_XH: integer;
declare const bj_CAMPAIGN_OFFSET_XN: integer;
declare const bj_CAMPAIGN_OFFSET_XO: integer;
declare const bj_CAMPAIGN_OFFSET_XU: integer;
declare const bj_CELLWIDTH: real;
declare var bj_changeLevelMapName: Option<null>;
declare var bj_changeLevelShowScores: null;
declare var bj_cineFadeContinueBlue: real;
declare var bj_cineFadeContinueDuration: real;
declare var bj_cineFadeContinueGreen: real;
declare var bj_cineFadeContinueRed: real;
declare var bj_cineFadeContinueTex: Option<null>;
declare var bj_cineFadeContinueTimer: Option<null>;
declare var bj_cineFadeContinueTrans: real;
declare var bj_cineFadeFinishTimer: Option<null>;
declare const bj_CINEFADETYPE_FADEIN: integer;
declare const bj_CINEFADETYPE_FADEOUT: integer;
declare const bj_CINEFADETYPE_FADEOUTIN: integer;
declare const bj_CINEMATICINDEX_HED: integer;
declare const bj_CINEMATICINDEX_HOP: integer;
declare const bj_CINEMATICINDEX_NED: integer;
declare const bj_CINEMATICINDEX_NOP: integer;
declare const bj_CINEMATICINDEX_OED: integer;
declare const bj_CINEMATICINDEX_OOP: integer;
declare const bj_CINEMATICINDEX_TOP: integer;
declare const bj_CINEMATICINDEX_UED: integer;
declare const bj_CINEMATICINDEX_UOP: integer;
declare const bj_CINEMATICINDEX_XED: integer;
declare const bj_CINEMATICINDEX_XOP: integer;
declare var bj_cineModeAlreadyIn: null;
declare var bj_cineModePriorDawnDusk: null;
declare var bj_cineModePriorFogSetting: null;
declare var bj_cineModePriorMaskSetting: null;
declare var bj_cineModePriorSpeed: Option<null>;
declare var bj_cineModeSavedSeed: integer;
declare const bj_CINEMODE_GAMESPEED: null;
declare const bj_CINEMODE_INTERFACEFADE: real;
declare const bj_CINEMODE_VOLUME_AMBIENTSOUNDS: real;
declare const bj_CINEMODE_VOLUME_COMBAT: real;
declare const bj_CINEMODE_VOLUME_FIRE: real;
declare const bj_CINEMODE_VOLUME_MUSIC: real;
declare const bj_CINEMODE_VOLUME_SPELLS: real;
declare const bj_CINEMODE_VOLUME_UI: real;
declare const bj_CINEMODE_VOLUME_UNITMOVEMENT: real;
declare const bj_CINEMODE_VOLUME_UNITSOUNDS: real;
declare var bj_cineSceneBeingSkipped: Option<null>;
declare var bj_cineSceneEndingTimer: Option<null>;
declare var bj_cineSceneLastSound: Option<null>;
declare const bj_CLIFFHEIGHT: real;
declare const bj_CORPSETYPE_BONE: integer;
declare const bj_CORPSETYPE_FLESH: integer;
declare const bj_CORPSE_MAX_DEATH_TIME: real;
declare const bj_CREEP_ITEM_DELAY: real;
declare var bj_crippledTimer: Record<number, Option<null>>;
declare var bj_crippledTimerWindows: Record<number, Option<null>>;
declare var bj_dawnSound: Option<null>;
declare var bj_dayAmbientSound: Option<null>;
declare var bj_defeatDialogSound: Option<null>;
declare const bj_DEGTORAD: real;
declare var bj_delayedSuspendDecayTimer: Option<null>;
declare var bj_delayedSuspendDecayTrig: Option<null>;
declare var bj_destInRegionDiesCount: integer;
declare var bj_destInRegionDiesTrig: Option<null>;
declare var bj_destRandomConsidered: integer;
declare var bj_destRandomCurrentPick: Option<null>;
declare var bj_dncIsDaytime: null;
declare var bj_dncSoundsDawn: Option<null>;
declare var bj_dncSoundsDay: Option<null>;
declare var bj_dncSoundsDusk: Option<null>;
declare var bj_dncSoundsNight: Option<null>;
declare var bj_duskSound: Option<null>;
declare const bj_E: real;
declare var bj_elevatorNeighbor: Option<null>;
declare var bj_elevatorWallBlocker: Option<null>;
declare const bj_ELEVATOR_BLOCKER_CODE: integer;
declare const bj_ELEVATOR_CODE01: integer;
declare const bj_ELEVATOR_CODE02: integer;
declare const bj_ELEVATOR_WALL_TYPE_ALL: integer;
declare const bj_ELEVATOR_WALL_TYPE_EAST: integer;
declare const bj_ELEVATOR_WALL_TYPE_NORTH: integer;
declare const bj_ELEVATOR_WALL_TYPE_SOUTH: integer;
declare const bj_ELEVATOR_WALL_TYPE_WEST: integer;
declare var bj_enumDestructableCenter: Option<null>;
declare var bj_enumDestructableRadius: real;
declare var bj_finishSoonAllExposed: null;
declare var bj_finishSoonTimerDialog: Option<null>;
declare var bj_forceCountPlayers: integer;
declare var bj_forceRandomConsidered: integer;
declare var bj_forceRandomCurrentPick: Option<null>;
declare var bj_FORCE_ALL_PLAYERS: Option<null>;
declare var bj_FORCE_PLAYER: Record<number, Option<null>>;
declare var bj_forLoopAIndex: integer;
declare var bj_forLoopAIndexEnd: integer;
declare var bj_forLoopBIndex: integer;
declare var bj_forLoopBIndexEnd: integer;
declare const bj_GAMECACHE_BOOLEAN: integer;
declare const bj_GAMECACHE_INTEGER: integer;
declare const bj_GAMECACHE_REAL: integer;
declare const bj_GAMECACHE_STRING: integer;
declare const bj_GAMECACHE_UNIT: integer;
declare var bj_gameStarted: null;
declare var bj_gameStartedTimer: Option<null>;
declare const bj_GAME_STARTED_THRESHOLD: real;
declare const bj_GATEOPERATION_CLOSE: integer;
declare const bj_GATEOPERATION_DESTROY: integer;
declare const bj_GATEOPERATION_OPEN: integer;
declare var bj_ghoul: Record<number, Option<null>>;
declare var bj_groupAddGroupDest: Option<null>;
declare var bj_groupCountUnits: integer;
declare var bj_groupEnumOwningPlayer: Option<null>;
declare var bj_groupEnumTypeId: integer;
declare var bj_groupLastCreatedDest: Option<null>;
declare var bj_groupRandomConsidered: integer;
declare var bj_groupRandomCurrentPick: Option<null>;
declare var bj_groupRemoveGroupDest: Option<null>;
declare const bj_HANDICAP_EASY: real;
declare const bj_HASHTABLE_BOOLEAN: integer;
declare const bj_HASHTABLE_HANDLE: integer;
declare const bj_HASHTABLE_INTEGER: integer;
declare const bj_HASHTABLE_REAL: integer;
declare const bj_HASHTABLE_STRING: integer;
declare const bj_HEROSTAT_AGI: integer;
declare const bj_HEROSTAT_INT: integer;
declare const bj_HEROSTAT_STR: integer;
declare var bj_isSinglePlayer: null;
declare var bj_isUnitGroupDeadResult: null;
declare var bj_isUnitGroupEmptyResult: null;
declare var bj_isUnitGroupInRectRect: Option<null>;
declare var bj_isUnitGroupInRectResult: null;
declare const bj_ITEMCODE_STATUS_PAWNABLE: integer;
declare const bj_ITEMCODE_STATUS_POWERUP: integer;
declare const bj_ITEMCODE_STATUS_SELLABLE: integer;
declare var bj_itemRandomConsidered: integer;
declare var bj_itemRandomCurrentPick: Option<null>;
declare const bj_ITEM_STATUS_HIDDEN: integer;
declare const bj_ITEM_STATUS_INVULNERABLE: integer;
declare const bj_ITEM_STATUS_OWNED: integer;
declare const bj_ITEM_STATUS_PAWNABLE: integer;
declare const bj_ITEM_STATUS_POWERUP: integer;
declare const bj_ITEM_STATUS_SELLABLE: integer;
declare const bj_KEYEVENTKEY_DOWN: integer;
declare const bj_KEYEVENTKEY_LEFT: integer;
declare const bj_KEYEVENTKEY_RIGHT: integer;
declare const bj_KEYEVENTKEY_UP: integer;
declare const bj_KEYEVENTTYPE_DEPRESS: integer;
declare const bj_KEYEVENTTYPE_RELEASE: integer;
declare var bj_lastCreatedButton: Option<null>;
declare var bj_lastCreatedDefeatCondition: Option<null>;
declare var bj_lastCreatedDestructable: Option<null>;
declare var bj_lastCreatedEffect: Option<null>;
declare var bj_lastCreatedFogModifier: Option<null>;
declare var bj_lastCreatedGameCache: Option<null>;
declare var bj_lastCreatedGroup: Option<null>;
declare var bj_lastCreatedHashtable: Option<null>;
declare var bj_lastCreatedImage: Option<null>;
declare var bj_lastCreatedItem: Option<null>;
declare var bj_lastCreatedLeaderboard: Option<null>;
declare var bj_lastCreatedLightning: Option<null>;
declare var bj_lastCreatedMultiboard: Option<null>;
declare var bj_lastCreatedQuest: Option<null>;
declare var bj_lastCreatedQuestItem: Option<null>;
declare var bj_lastCreatedTerrainDeformation: Option<null>;
declare var bj_lastCreatedTextTag: Option<null>;
declare var bj_lastCreatedTimerDialog: Option<null>;
declare var bj_lastCreatedUbersplat: Option<null>;
declare var bj_lastCreatedUnit: Option<null>;
declare var bj_lastCreatedWeatherEffect: Option<null>;
declare var bj_lastDyingWidget: Option<null>;
declare var bj_lastHauntedGoldMine: Option<null>;
declare var bj_lastLoadedUnit: Option<null>;
declare var bj_lastPlayedMusic: Option<null>;
declare var bj_lastPlayedSound: Option<null>;
declare var bj_lastRemovedItem: Option<null>;
declare var bj_lastReplacedUnit: Option<null>;
declare var bj_lastStartedTimer: Option<null>;
declare var bj_lastTransmissionDuration: real;
declare var bj_livingPlayerUnitsTypeId: integer;
declare var bj_makeUnitRescuableFlag: null;
declare var bj_makeUnitRescuableUnit: Option<null>;
declare var bj_mapInitialCameraBounds: Option<null>;
declare var bj_mapInitialPlayableArea: Option<null>;
declare const bj_MAX_DEST_IN_REGION_EVENTS: integer;
declare const bj_MAX_INVENTORY: integer;
declare const bj_MAX_ITEM_LEVEL: integer;
declare const bj_MAX_PLAYERS: integer;
declare const bj_MAX_PLAYER_SLOTS: integer;
declare const bj_MAX_QUEUED_TRIGGERS: integer;
declare const bj_MAX_SKELETONS: integer;
declare const bj_MAX_STOCK_ITEM_SLOTS: integer;
declare const bj_MAX_STOCK_UNIT_SLOTS: integer;
declare var bj_meleeDefeated: Record<number, null>;
declare var bj_meleeGameOver: null;
declare var bj_meleeGrantHeroItems: null;
declare var bj_meleeNearestMine: Option<null>;
declare var bj_meleeNearestMineDist: real;
declare var bj_meleeNearestMineToLoc: Option<null>;
declare var bj_meleeTwinkedHeroes: Record<number, integer>;
declare var bj_meleeVictoried: Record<number, null>;
declare var bj_meleeVisibilityIsDay: null;
declare var bj_meleeVisibilityTrained: Option<null>;
declare const bj_MELEE_CLEAR_UNITS_RADIUS: real;
declare const bj_MELEE_CRIPPLE_MSG_DURATION: real;
declare const bj_MELEE_CRIPPLE_TIMEOUT: real;
declare const bj_MELEE_HERO_LIMIT: integer;
declare const bj_MELEE_HERO_TYPE_LIMIT: integer;
declare var bj_MELEE_MAX_TWINKED_HEROES: integer;
declare const bj_MELEE_MAX_TWINKED_HEROES_V0: integer;
declare const bj_MELEE_MAX_TWINKED_HEROES_V1: integer;
declare const bj_MELEE_MINE_SEARCH_RADIUS: real;
declare const bj_MELEE_STARTING_GOLD_V0: integer;
declare const bj_MELEE_STARTING_GOLD_V1: integer;
declare const bj_MELEE_STARTING_HERO_TOKENS: integer;
declare const bj_MELEE_STARTING_LUMBER_V0: integer;
declare const bj_MELEE_STARTING_LUMBER_V1: integer;
declare const bj_MELEE_STARTING_TOD: real;
declare const bj_MINIMAPPINGSTYLE_ATTACK: integer;
declare const bj_MINIMAPPINGSTYLE_FLASHY: integer;
declare const bj_MINIMAPPINGSTYLE_SIMPLE: integer;
declare const bj_MISSION_INDEX_H00: integer;
declare const bj_MISSION_INDEX_H01: integer;
declare const bj_MISSION_INDEX_H02: integer;
declare const bj_MISSION_INDEX_H03: integer;
declare const bj_MISSION_INDEX_H04: integer;
declare const bj_MISSION_INDEX_H05: integer;
declare const bj_MISSION_INDEX_H06: integer;
declare const bj_MISSION_INDEX_H07: integer;
declare const bj_MISSION_INDEX_H08: integer;
declare const bj_MISSION_INDEX_H09: integer;
declare const bj_MISSION_INDEX_H10: integer;
declare const bj_MISSION_INDEX_H11: integer;
declare const bj_MISSION_INDEX_N00: integer;
declare const bj_MISSION_INDEX_N01: integer;
declare const bj_MISSION_INDEX_N02: integer;
declare const bj_MISSION_INDEX_N03: integer;
declare const bj_MISSION_INDEX_N04: integer;
declare const bj_MISSION_INDEX_N05: integer;
declare const bj_MISSION_INDEX_N06: integer;
declare const bj_MISSION_INDEX_N07: integer;
declare const bj_MISSION_INDEX_N08: integer;
declare const bj_MISSION_INDEX_N09: integer;
declare const bj_MISSION_INDEX_O00: integer;
declare const bj_MISSION_INDEX_O01: integer;
declare const bj_MISSION_INDEX_O02: integer;
declare const bj_MISSION_INDEX_O03: integer;
declare const bj_MISSION_INDEX_O04: integer;
declare const bj_MISSION_INDEX_O05: integer;
declare const bj_MISSION_INDEX_O06: integer;
declare const bj_MISSION_INDEX_O07: integer;
declare const bj_MISSION_INDEX_O08: integer;
declare const bj_MISSION_INDEX_O09: integer;
declare const bj_MISSION_INDEX_O10: integer;
declare const bj_MISSION_INDEX_T00: integer;
declare const bj_MISSION_INDEX_T01: integer;
declare const bj_MISSION_INDEX_U00: integer;
declare const bj_MISSION_INDEX_U01: integer;
declare const bj_MISSION_INDEX_U02: integer;
declare const bj_MISSION_INDEX_U03: integer;
declare const bj_MISSION_INDEX_U05: integer;
declare const bj_MISSION_INDEX_U07: integer;
declare const bj_MISSION_INDEX_U08: integer;
declare const bj_MISSION_INDEX_U09: integer;
declare const bj_MISSION_INDEX_U10: integer;
declare const bj_MISSION_INDEX_U11: integer;
declare const bj_MISSION_INDEX_XH00: integer;
declare const bj_MISSION_INDEX_XH01: integer;
declare const bj_MISSION_INDEX_XH02: integer;
declare const bj_MISSION_INDEX_XH03: integer;
declare const bj_MISSION_INDEX_XH04: integer;
declare const bj_MISSION_INDEX_XH05: integer;
declare const bj_MISSION_INDEX_XH06: integer;
declare const bj_MISSION_INDEX_XH07: integer;
declare const bj_MISSION_INDEX_XH08: integer;
declare const bj_MISSION_INDEX_XH09: integer;
declare const bj_MISSION_INDEX_XN00: integer;
declare const bj_MISSION_INDEX_XN01: integer;
declare const bj_MISSION_INDEX_XN02: integer;
declare const bj_MISSION_INDEX_XN03: integer;
declare const bj_MISSION_INDEX_XN04: integer;
declare const bj_MISSION_INDEX_XN05: integer;
declare const bj_MISSION_INDEX_XN06: integer;
declare const bj_MISSION_INDEX_XN07: integer;
declare const bj_MISSION_INDEX_XN08: integer;
declare const bj_MISSION_INDEX_XN09: integer;
declare const bj_MISSION_INDEX_XN10: integer;
declare const bj_MISSION_INDEX_XO00: integer;
declare const bj_MISSION_INDEX_XU00: integer;
declare const bj_MISSION_INDEX_XU01: integer;
declare const bj_MISSION_INDEX_XU02: integer;
declare const bj_MISSION_INDEX_XU03: integer;
declare const bj_MISSION_INDEX_XU04: integer;
declare const bj_MISSION_INDEX_XU05: integer;
declare const bj_MISSION_INDEX_XU06: integer;
declare const bj_MISSION_INDEX_XU07: integer;
declare const bj_MISSION_INDEX_XU08: integer;
declare const bj_MISSION_INDEX_XU09: integer;
declare const bj_MISSION_INDEX_XU10: integer;
declare const bj_MISSION_INDEX_XU11: integer;
declare const bj_MISSION_INDEX_XU12: integer;
declare const bj_MISSION_INDEX_XU13: integer;
declare const bj_MODIFYMETHOD_ADD: integer;
declare const bj_MODIFYMETHOD_SET: integer;
declare const bj_MODIFYMETHOD_SUB: integer;
declare var bj_nightAmbientSound: Option<null>;
declare const bj_NOTHING_SOUND_DURATION: real;
declare var bj_pauseAllUnitsFlag: null;
declare const bj_PI: real;
declare var bj_playerIsCrippled: Record<number, null>;
declare var bj_playerIsExposed: Record<number, null>;
declare const bj_PLAYER_NEUTRAL_EXTRA: integer;
declare const bj_PLAYER_NEUTRAL_VICTIM: integer;
declare const bj_POLLED_WAIT_INTERVAL: real;
declare const bj_POLLED_WAIT_SKIP_THRESHOLD: real;
declare var bj_questCompletedSound: Option<null>;
declare var bj_questDiscoveredSound: Option<null>;
declare var bj_questFailedSound: Option<null>;
declare var bj_questHintSound: Option<null>;
declare var bj_questItemAcquiredSound: Option<null>;
declare const bj_QUESTMESSAGE_ALWAYSHINT: integer;
declare const bj_QUESTMESSAGE_COMPLETED: integer;
declare const bj_QUESTMESSAGE_DISCOVERED: integer;
declare const bj_QUESTMESSAGE_FAILED: integer;
declare const bj_QUESTMESSAGE_HINT: integer;
declare const bj_QUESTMESSAGE_ITEMACQUIRED: integer;
declare const bj_QUESTMESSAGE_MISSIONFAILED: integer;
declare const bj_QUESTMESSAGE_REQUIREMENT: integer;
declare const bj_QUESTMESSAGE_SECRET: integer;
declare const bj_QUESTMESSAGE_UNITACQUIRED: integer;
declare const bj_QUESTMESSAGE_UNITAVAILABLE: integer;
declare const bj_QUESTMESSAGE_UPDATED: integer;
declare const bj_QUESTMESSAGE_WARNING: integer;
declare var bj_questSecretSound: Option<null>;
declare const bj_QUESTTYPE_OPT_DISCOVERED: integer;
declare const bj_QUESTTYPE_OPT_UNDISCOVERED: integer;
declare const bj_QUESTTYPE_REQ_DISCOVERED: integer;
declare const bj_QUESTTYPE_REQ_UNDISCOVERED: integer;
declare var bj_questUpdatedSound: Option<null>;
declare var bj_questWarningSound: Option<null>;
declare var bj_queuedExecTimeout: Option<null>;
declare var bj_queuedExecTimeoutTimer: Option<null>;
declare var bj_queuedExecTotal: integer;
declare var bj_queuedExecTriggers: Record<number, Option<null>>;
declare var bj_queuedExecUseConds: Record<number, null>;
declare const bj_QUEUED_TRIGGER_TIMEOUT: real;
declare const bj_QUEUE_DELAY_HINT: real;
declare const bj_QUEUE_DELAY_QUEST: real;
declare const bj_QUEUE_DELAY_SECRET: real;
declare const bj_RADTODEG: real;
declare var bj_randDistChance: Record<number, integer>;
declare var bj_randDistCount: integer;
declare var bj_randDistID: Record<number, integer>;
declare var bj_randomSubGroupChance: real;
declare var bj_randomSubGroupGroup: Option<null>;
declare var bj_randomSubGroupTotal: integer;
declare var bj_randomSubGroupWant: integer;
declare const bj_REMOVEBUFFS_ALL: integer;
declare const bj_REMOVEBUFFS_NEGATIVE: integer;
declare const bj_REMOVEBUFFS_NONTLIFE: integer;
declare const bj_REMOVEBUFFS_POSITIVE: integer;
declare var bj_rescueChangeColorBldg: null;
declare var bj_rescueChangeColorUnit: null;
declare var bj_rescueSound: Option<null>;
declare var bj_rescueUnitBehavior: Option<null>;
declare const bj_RESCUE_PING_TIME: real;
declare var bj_setPlayerTargetColor: Option<null>;
declare var bj_slotControl: Record<number, Option<null>>;
declare var bj_slotControlReady: null;
declare var bj_slotControlUsed: Record<number, null>;
declare const bj_SMARTPAN_TRESHOLD_PAN: real;
declare const bj_SMARTPAN_TRESHOLD_SNAP: real;
declare const bj_SORTTYPE_SORTBYLABEL: integer;
declare const bj_SORTTYPE_SORTBYPLAYER: integer;
declare const bj_SORTTYPE_SORTBYVALUE: integer;
declare const bj_SPEECH_VOLUME_AMBIENTSOUNDS: real;
declare const bj_SPEECH_VOLUME_COMBAT: real;
declare const bj_SPEECH_VOLUME_FIRE: real;
declare const bj_SPEECH_VOLUME_MUSIC: real;
declare const bj_SPEECH_VOLUME_SPELLS: real;
declare const bj_SPEECH_VOLUME_UI: real;
declare const bj_SPEECH_VOLUME_UNITMOVEMENT: real;
declare const bj_SPEECH_VOLUME_UNITSOUNDS: real;
declare var bj_stockAllowedArtifact: Record<number, null>;
declare var bj_stockAllowedCharged: Record<number, null>;
declare var bj_stockAllowedPermanent: Record<number, null>;
declare var bj_stockItemPurchased: Option<null>;
declare var bj_stockPickedItemLevel: integer;
declare var bj_stockPickedItemType: Option<null>;
declare var bj_stockUpdateTimer: Option<null>;
declare const bj_STOCK_MAX_ITERATIONS: integer;
declare const bj_STOCK_RESTOCK_INITIAL_DELAY: real;
declare const bj_STOCK_RESTOCK_INTERVAL: real;
declare var bj_suspendDecayBoneGroup: Option<null>;
declare var bj_suspendDecayFleshGroup: Option<null>;
declare const bj_TEXT_DELAY_ALWAYSHINT: real;
declare const bj_TEXT_DELAY_HINT: real;
declare const bj_TEXT_DELAY_ITEMACQUIRED: real;
declare const bj_TEXT_DELAY_MISSIONFAILED: real;
declare const bj_TEXT_DELAY_QUEST: real;
declare const bj_TEXT_DELAY_QUESTDONE: real;
declare const bj_TEXT_DELAY_QUESTFAILED: real;
declare const bj_TEXT_DELAY_QUESTREQUIREMENT: real;
declare const bj_TEXT_DELAY_QUESTUPDATE: real;
declare const bj_TEXT_DELAY_SECRET: real;
declare const bj_TEXT_DELAY_UNITACQUIRED: real;
declare const bj_TEXT_DELAY_UNITAVAILABLE: real;
declare const bj_TEXT_DELAY_WARNING: real;
declare const bj_TIMETYPE_ADD: integer;
declare const bj_TIMETYPE_SET: integer;
declare const bj_TIMETYPE_SUB: integer;
declare const bj_TOD_DAWN: real;
declare const bj_TOD_DUSK: real;
declare const bj_TRANSMISSION_IND_ALPHA: integer;
declare const bj_TRANSMISSION_IND_BLUE: integer;
declare const bj_TRANSMISSION_IND_GREEN: integer;
declare const bj_TRANSMISSION_IND_RED: integer;
declare const bj_TRANSMISSION_PING_TIME: real;
declare const bj_TRANSMISSION_PORT_HANGTIME: real;
declare const bj_UNIT_FACING: real;
declare const bj_UNIT_STATE_METHOD_ABSOLUTE: integer;
declare const bj_UNIT_STATE_METHOD_DEFAULTS: integer;
declare const bj_UNIT_STATE_METHOD_MAXIMUM: integer;
declare const bj_UNIT_STATE_METHOD_RELATIVE: integer;
declare var bj_useDawnDuskSounds: null;
declare var bj_victoryDialogSound: Option<null>;
declare var bj_volumeGroupsTimer: Option<null>;
declare const bj_WAIT_FOR_COND_MIN_INTERVAL: real;
declare var bj_wantDestroyGroup: null;
declare var filterEnumDestructablesInCircleBJ: Option<null>;
declare var filterGetUnitsInRectOfPlayer: Option<null>;
declare var filterGetUnitsOfPlayerAndTypeId: Option<null>;
declare var filterGetUnitsOfTypeIdAll: Option<null>;
declare var filterIssueHauntOrderAtLocBJ: Option<null>;
declare var filterLivingPlayerUnitsOfTypeId: Option<null>;
declare var filterMeleeTrainedUnitIsHeroBJ: Option<null>;

// =================
// ==== NATIVES ====
// =================
// ===================
// ==== FUNCTIONS ====
// ===================
declare function AbortCinematicFadeBJ(): void;
declare function AcosBJ(degrees: real): number;
declare function AddHeroXPSwapped(xpToAdd: integer, whichHero: unit, showEyeCandy: boolean): void;
declare function AddItemToStockBJ(itemId: integer, whichUnit: unit, currentStock: integer, stockMax: integer): void;
declare function AddLightningLoc(codeName: string, where1: location, where2: location): Option<lightning>;
declare function AddResourceAmountBJ(delta: integer, whichUnit: unit): void;
declare function AddSpecialEffectLocBJ(where: location, modelName: string): Option<effect>;
declare function AddSpecialEffectTargetUnitBJ(attachPointName: string, targetWidget: widget, modelName: string): Option<effect>;
declare function AddUnitAnimationPropertiesBJ(add: boolean, animProperties: string, whichUnit: unit): void;
declare function AddUnitToStockBJ(unitId: integer, whichUnit: unit, currentStock: integer, stockMax: integer): void;
declare function AddWeatherEffectSaveLast(where: rect, effectID: integer): Option<weathereffect>;
declare function AdjustCameraBoundsBJ(adjustMethod: integer, dxWest: real, dxEast: real, dyNorth: real, dySouth: real): void;
declare function AdjustCameraBoundsForPlayerBJ(adjustMethod: integer, whichPlayer: player, dxWest: real, dxEast: real, dyNorth: real, dySouth: real): void;
declare function AdjustPlayerStateBJ(delta: integer, whichPlayer: player, whichPlayerState: playerstate): void;
declare function AdjustPlayerStateSimpleBJ(whichPlayer: player, whichPlayerState: playerstate, delta: integer): void;
declare function AllowVictoryDefeat(gameResult: playergameresult): boolean;
declare function AngleBetweenPoints(locA: location, locB: location): number;
declare function AsinBJ(degrees: real): number;
declare function Atan2BJ(y: real, x: real): number;
declare function AtanBJ(degrees: real): number;
declare function AttachSoundToUnitBJ(soundHandle: sound, whichUnit: unit): void;
declare function BJDebugMsg(msg: string): void;
declare function BlightGoldMineForPlayer(goldMine: unit, whichPlayer: player): Option<unit>;
declare function BlightGoldMineForPlayerBJ(goldMine: unit, whichPlayer: player): Option<unit>;
declare function CameraClearNoiseForPlayer(whichPlayer: player): void;
declare function CameraResetSmoothingFactorBJ(): void;
declare function CameraSetEQNoiseForPlayer(whichPlayer: player, magnitude: real): void;
declare function CameraSetSmoothingFactorBJ(factor: real): void;
declare function CameraSetSourceNoiseForPlayer(whichPlayer: player, magnitude: real, velocity: real): void;
declare function CameraSetTargetNoiseForPlayer(whichPlayer: player, magnitude: real, velocity: real): void;
declare function CameraSetupApplyForPlayer(doPan: boolean, whichSetup: camerasetup, whichPlayer: player, duration: real): void;
declare function CameraSetupGetFieldSwap(whichField: camerafield, whichSetup: camerasetup): number;
declare function CancelCineSceneBJ(): void;
declare function ChangeElevatorHeight(d: destructable, newHeight: integer): void;
declare function ChangeElevatorWallBlocker(x: real, y: real, facing: real, open: boolean): void;
declare function ChangeElevatorWalls(open: boolean, walls: integer, d: destructable): void;
declare function CheckInitPlayerSlotAvailability(): void;
declare function CheckItemcodeStatus(itemId: integer, status: integer): boolean;
declare function CheckItemStatus(whichItem: item, status: integer): boolean;
declare function ChooseRandomCreepBJ(level: integer): number;
declare function ChooseRandomItemBJ(level: integer): number;
declare function ChooseRandomItemExBJ(level: integer, whichType: itemtype): number;
declare function ChooseRandomNPBuildingBJ(): number;
declare function CinematicFadeBJ(fadetype: integer, duration: real, tex: string, red: real, green: real, blue: real, trans: real): void;
declare function CinematicFadeCommonBJ(red: real, green: real, blue: real, duration: real, tex: string, startTrans: real, endTrans: real): void;
declare function CinematicFilterGenericBJ(duration: real, bmode: blendmode, tex: string, red0: real, green0: real, blue0: real, trans0: real, red1: real, green1: real, blue1: real, trans1: real): void;
declare function CinematicModeBJ(cineMode: boolean, forForce: force): void;
declare function CinematicModeExBJ(cineMode: boolean, forForce: force, interfaceFadeTime: real): void;
declare function ClearMapMusicBJ(): void;
declare function ClearSelectionForPlayer(whichPlayer: player): void;
declare function ClearTextMessagesBJ(toForce: force): void;
declare function CommentString(commentString: string): void;
declare function CompareLocationsBJ(A: location, B: location): boolean;
declare function CompareRectsBJ(A: rect, B: rect): boolean;
declare function ConditionalTriggerExecute(trig: trigger): void;
declare function ConfigureNeutralVictim(): void;
declare function ContinueCinematicFadeAfterBJ(duration: real, red: real, green: real, blue: real, trans: real, tex: string): void;
declare function ContinueCinematicFadeBJ(): void;
declare function ConvertedPlayer(convertedPlayerId: integer): Option<player>;
declare function CopySaveGameBJ(sourceSaveName: string, destSaveName: string): boolean;
declare function CosBJ(degrees: real): number;
declare function CountLivingPlayerUnitsOfTypeId(unitId: integer, whichPlayer: player): number;
declare function CountPlayersInForceBJ(f: force): number;
declare function CountPlayersInForceEnum(): void;
declare function CountUnitsInGroup(g: group): number;
declare function CountUnitsInGroupEnum(): void;
declare function CreateCorpseLocBJ(unitid: integer, whichPlayer: player, loc: location): Option<unit>;
declare function CreateDeadDestructableLocBJ(objectid: integer, loc: location, facing: real, scale: real, variation: integer): Option<destructable>;
declare function CreateDefeatConditionBJ(description: string): Option<defeatcondition>;
declare function CreateDestructableLoc(objectid: integer, loc: location, facing: real, scale: real, variation: integer): Option<destructable>;
declare function CreateFogModifierRadiusLocBJ(enabled: boolean, whichPlayer: player, whichFogState: fogstate, center: location, radius: real): Option<fogmodifier>;
declare function CreateFogModifierRadiusLocSimple(whichPlayer: player, whichFogState: fogstate, center: location, radius: real, afterUnits: boolean): Option<fogmodifier>;
declare function CreateFogModifierRectBJ(enabled: boolean, whichPlayer: player, whichFogState: fogstate, r: rect): Option<fogmodifier>;
declare function CreateFogModifierRectSimple(whichPlayer: player, whichFogState: fogstate, r: rect, afterUnits: boolean): Option<fogmodifier>;
declare function CreateImageBJ(file: string, size: real, where: location, zOffset: real, imageType: integer): Option<image>;
declare function CreateItemLoc(itemId: integer, loc: location): Option<item>;
declare function CreateLeaderboardBJ(toForce: force, label: string): Option<leaderboard>;
declare function CreateMultiboardBJ(cols: integer, rows: integer, title: string): Option<multiboard>;
declare function CreateNUnitsAtLoc(count: integer, unitId: integer, whichPlayer: player, loc: location, face: real): Option<group>;
declare function CreateNUnitsAtLocFacingLocBJ(count: integer, unitId: integer, whichPlayer: player, loc: location, lookAt: location): Option<group>;
declare function CreatePermanentCorpseLocBJ(style: integer, unitid: integer, whichPlayer: player, loc: location, facing: real): Option<unit>;
declare function CreateQuestBJ(questType: integer, title: string, description: string, iconPath: string): Option<quest>;
declare function CreateQuestItemBJ(whichQuest: quest, description: string): Option<questitem>;
declare function CreateTextTagLocBJ(s: string, loc: location, zOffset: real, size: real, red: real, green: real, blue: real, transparency: real): Option<texttag>;
declare function CreateTextTagUnitBJ(s: string, whichUnit: unit, zOffset: real, size: real, red: real, green: real, blue: real, transparency: real): Option<texttag>;
declare function CreateTimerBJ(periodic: boolean, timeout: real): Option<timer>;
declare function CreateTimerDialogBJ(t: timer, title: string): Option<timerdialog>;
declare function CreateUbersplatBJ(where: location, name: string, red: real, green: real, blue: real, alpha: real, forcePaused: boolean, noBirthTime: boolean): Option<ubersplat>;
declare function CreateUnitAtLocSaveLast(id: player, unitid: integer, loc: location, face: real): Option<unit>;
declare function CustomDefeatBJ(whichPlayer: player, message: string): void;
declare function CustomDefeatDialogBJ(whichPlayer: player, message: string): void;
declare function CustomDefeatLoadBJ(): void;
declare function CustomDefeatQuitBJ(): void;
declare function CustomDefeatReduceDifficultyBJ(): void;
declare function CustomDefeatRestartBJ(): void;
declare function CustomVictoryBJ(whichPlayer: player, showDialog: boolean, showScores: boolean): void;
declare function CustomVictoryDialogBJ(whichPlayer: player): void;
declare function CustomVictoryOkBJ(): void;
declare function CustomVictoryQuitBJ(): void;
declare function CustomVictorySkipBJ(whichPlayer: player): void;
declare function DecUnitAbilityLevelSwapped(abilcode: integer, whichUnit: unit): number;
declare function DefeatConditionSetDescriptionBJ(whichCondition: defeatcondition, description: string): void;
declare function DelayedSuspendDecay(): void;
declare function DelayedSuspendDecayBoneEnum(): void;
declare function DelayedSuspendDecayCreate(): void;
declare function DelayedSuspendDecayFleshEnum(): void;
declare function DelayedSuspendDecayStopAnimEnum(): void;
declare function DestroyDefeatConditionBJ(whichCondition: defeatcondition): void;
declare function DestroyEffectBJ(whichEffect: effect): void;
declare function DestroyLeaderboardBJ(lb: leaderboard): void;
declare function DestroyLightningBJ(whichBolt: lightning): boolean;
declare function DestroyMultiboardBJ(mb: multiboard): void;
declare function DestroyQuestBJ(whichQuest: quest): void;
declare function DestroyTextTagBJ(tt: texttag): void;
declare function DestroyTimerBJ(whichTimer: timer): void;
declare function DestroyTimerDialogBJ(td: timerdialog): void;
declare function DestructableAddIndicatorBJ(whichDestructable: destructable, red: real, green: real, blue: real, transparency: real): void;
declare function DetectGameStarted(): void;
declare function DialogAddButtonBJ(whichDialog: dialog, buttonText: string): Option<button>;
declare function DialogAddButtonWithHotkeyBJ(whichDialog: dialog, buttonText: string, hotkey: integer): Option<button>;
declare function DialogClearBJ(whichDialog: dialog): void;
declare function DialogDisplayBJ(flag: boolean, whichDialog: dialog, whichPlayer: player): void;
declare function DialogSetMessageBJ(whichDialog: dialog, message: string): void;
declare function DisplayCineFilterBJ(flag: boolean): void;
declare function DisplayTextToForce(toForce: force, message: string): void;
declare function DisplayTimedTextToForce(toForce: force, duration: real, message: string): void;
declare function DistanceBetweenPoints(locA: location, locB: location): number;
declare function DoesUnitGenerateAlarms(whichUnit: unit): boolean;
declare function DoNothing(): void;
declare function DoTransmissionBasicsXYBJ(unitId: integer, color: playercolor, x: real, y: real, soundHandle: sound, unitName: string, message: string, duration: real): void;
declare function EnableCreepSleepBJ(enable: boolean): void;
declare function EnableDawnDusk(flag: boolean): void;
declare function EnableOcclusionBJ(enable: boolean, f: force): void;
declare function EnableWorldFogBoundaryBJ(enable: boolean, f: force): void;
declare function EndGameBJ(): void;
declare function EndThematicMusicBJ(): void;
declare function EnumDestructablesInCircleBJ(radius: real, loc: location, actionFunc: () => void): void;
declare function EnumDestructablesInCircleBJFilter(): boolean;
declare function EnumDestructablesInRectAll(r: rect, actionFunc: () => void): void;
declare function EnumItemsInRectBJ(r: rect, actionFunc: () => void): void;
declare function EnumUnitsSelected(whichPlayer: player, enumFilter: boolexpr, enumAction: () => void): void;
declare function ExplodeUnitBJ(whichUnit: unit): void;
declare function FFAInitPlayerSlots(): void;
declare function FindElevatorWallBlockerEnum(): void;
declare function FinishCinematicFadeAfterBJ(duration: real): void;
declare function FinishCinematicFadeBJ(): void;
declare function FlashQuestDialogButtonBJ(): void;
declare function FlushChildHashtableBJ(missionKey: integer, table: hashtable): void;
declare function FlushGameCacheBJ(cache: gamecache): void;
declare function FlushParentHashtableBJ(table: hashtable): void;
declare function FlushStoredMissionBJ(missionKey: string, cache: gamecache): void;
declare function FogEnableOff(): void;
declare function FogEnableOn(): void;
declare function FogMaskEnableOff(): void;
declare function FogMaskEnableOn(): void;
declare function ForceAddPlayerSimple(whichPlayer: player, whichForce: force): void;
declare function ForceCinematicSubtitlesBJ(flag: boolean): void;
declare function ForcePickRandomPlayer(whichForce: force): Option<player>;
declare function ForcePickRandomPlayerEnum(): void;
declare function ForceRemovePlayerSimple(whichPlayer: player, whichForce: force): void;
declare function ForceSetLeaderboardBJ(lb: leaderboard, toForce: force): void;
declare function ForceUICancelBJ(whichPlayer: player): void;
declare function ForceUIKeyBJ(whichPlayer: player, key: string): void;
declare function ForGroupBJ(whichGroup: group, callback: () => void): void;
declare function GameOverDialogBJ(whichPlayer: player, leftGame: boolean): void;
declare function GetAbilityEffectBJ(abilcode: integer, t: effecttype, index: integer): Option<string>;
declare function GetAbilityName(abilcode: integer): Option<string>;
declare function GetAbilitySoundBJ(abilcode: integer, t: soundtype): Option<string>;
declare function GetAttackedUnitBJ(): Option<unit>;
declare function GetBooleanAnd(valueA: boolean, valueB: boolean): boolean;
declare function GetBooleanOr(valueA: boolean, valueB: boolean): boolean;
declare function GetCameraBoundsMapRect(): Option<rect>;
declare function GetClickedButtonBJ(): Option<button>;
declare function GetClickedDialogBJ(): Option<dialog>;
declare function GetConvertedPlayerId(whichPlayer: player): number;
declare function GetCurrentCameraBoundsMapRectBJ(): Option<rect>;
declare function GetCurrentCameraSetup(): Option<camerasetup>;
declare function GetDestructableLoc(whichDestructable: destructable): Option<location>;
declare function GetDyingDestructable(): Option<destructable>;
declare function GetElevatorHeight(d: destructable): number;
declare function GetEntireMapRect(): Option<rect>;
declare function GetFadeFromSeconds(seconds: real): number;
declare function GetFadeFromSecondsAsReal(seconds: real): number;
declare function GetForceOfPlayer(whichPlayer: player): Option<force>;
declare function GetForLoopIndexA(): number;
declare function GetForLoopIndexB(): number;
declare function GetHandleIdBJ(h: handle): number;
declare function GetHeroStatBJ(whichStat: integer, whichHero: unit, includeBonuses: boolean): number;
declare function GetInventoryIndexOfItemTypeBJ(whichUnit: unit, itemId: integer): number;
declare function GetIssuedOrderIdBJ(): number;
declare function GetItemLifeBJ(whichWidget: widget): number;
declare function GetItemLoc(whichItem: item): Option<location>;
declare function GetItemOfTypeFromUnitBJ(whichUnit: unit, itemId: integer): Option<item>;
declare function GetKillingUnitBJ(): Option<unit>;
declare function GetLastCreatedButtonBJ(): Option<button>;
declare function GetLastCreatedDefeatConditionBJ(): Option<defeatcondition>;
declare function GetLastCreatedDestructable(): Option<destructable>;
declare function GetLastCreatedEffectBJ(): Option<effect>;
declare function GetLastCreatedFogModifier(): Option<fogmodifier>;
declare function GetLastCreatedGameCacheBJ(): Option<gamecache>;
declare function GetLastCreatedGroup(): Option<group>;
declare function GetLastCreatedGroupEnum(): void;
declare function GetLastCreatedHashtableBJ(): Option<hashtable>;
declare function GetLastCreatedImage(): Option<image>;
declare function GetLastCreatedItem(): Option<item>;
declare function GetLastCreatedLeaderboard(): Option<leaderboard>;
declare function GetLastCreatedLightningBJ(): Option<lightning>;
declare function GetLastCreatedMultiboard(): Option<multiboard>;
declare function GetLastCreatedQuestBJ(): Option<quest>;
declare function GetLastCreatedQuestItemBJ(): Option<questitem>;
declare function GetLastCreatedTerrainDeformation(): Option<terraindeformation>;
declare function GetLastCreatedTextTag(): Option<texttag>;
declare function GetLastCreatedTimerBJ(): Option<timer>;
declare function GetLastCreatedTimerDialogBJ(): Option<timerdialog>;
declare function GetLastCreatedUbersplat(): Option<ubersplat>;
declare function GetLastCreatedUnit(): Option<unit>;
declare function GetLastCreatedWeatherEffect(): Option<weathereffect>;
declare function GetLastHauntedGoldMine(): Option<unit>;
declare function GetLastPlayedMusic(): Option<string>;
declare function GetLastPlayedSound(): Option<sound>;
declare function GetLastRemovedItem(): Option<item>;
declare function GetLastReplacedUnitBJ(): Option<unit>;
declare function GetLastRestoredUnitBJ(): Option<unit>;
declare function GetLastTransmissionDurationBJ(): number;
declare function GetLearnedSkillBJ(): number;
declare function GetLightningColorABJ(whichBolt: lightning): number;
declare function GetLightningColorBBJ(whichBolt: lightning): number;
declare function GetLightningColorGBJ(whichBolt: lightning): number;
declare function GetLightningColorRBJ(whichBolt: lightning): number;
declare function GetLoadedUnitBJ(): Option<unit>;
declare function GetPlayableMapRect(): Option<rect>;
declare function GetPlayerHandicapBJ(whichPlayer: player): number;
declare function GetPlayerHandicapXPBJ(whichPlayer: player): number;
declare function GetPlayersAll(): Option<force>;
declare function GetPlayersAllies(whichPlayer: player): Option<force>;
declare function GetPlayersByMapControl(whichControl: mapcontrol): Option<force>;
declare function GetPlayersEnemies(whichPlayer: player): Option<force>;
declare function GetPlayersMatching(filter: boolexpr): Option<force>;
declare function GetPlayerStartLocationLoc(whichPlayer: player): Option<location>;
declare function GetPlayerStartLocationX(whichPlayer: player): number;
declare function GetPlayerStartLocationY(whichPlayer: player): number;
declare function GetPlayerTaxRateBJ(whichResource: playerstate, sourcePlayer: player, otherPlayer: player): number;
declare function GetPlayerTechCountSimple(techid: integer, whichPlayer: player): number;
declare function GetPlayerTechMaxAllowedSwap(techid: integer, whichPlayer: player): number;
declare function GetRandomDirectionDeg(): number;
declare function GetRandomLocInRect(whichRect: rect): Option<location>;
declare function GetRandomPercentageBJ(): number;
declare function GetRandomSubGroup(count: integer, sourceGroup: group): Option<group>;
declare function GetRandomSubGroupEnum(): void;
declare function GetRectCenter(whichRect: rect): Option<location>;
declare function GetRectFromCircleBJ(center: location, radius: real): Option<rect>;
declare function GetRectHeightBJ(r: rect): number;
declare function GetRectWidthBJ(r: rect): number;
declare function GetSoundDurationBJ(soundHandle: sound): number;
declare function GetSoundFileDurationBJ(musicFileName: string): number;
declare function GetSoundIsPlayingBJ(soundHandle: sound): boolean;
declare function GetStoredBooleanBJ(key: string, missionKey: string, cache: gamecache): boolean;
declare function GetStoredIntegerBJ(key: string, missionKey: string, cache: gamecache): number;
declare function GetStoredRealBJ(key: string, missionKey: string, cache: gamecache): number;
declare function GetStoredStringBJ(key: string, missionKey: string, cache: gamecache): Option<string>;
declare function GetTerrainCliffLevelBJ(where: location): number;
declare function GetTerrainTypeBJ(where: location): number;
declare function GetTerrainVarianceBJ(where: location): number;
declare function GetTimeOfDay(): number;
declare function GetTimeOfDayScalePercentBJ(): number;
declare function GetTransmissionDuration(soundHandle: sound, timeType: integer, timeVal: real): number;
declare function GetTransportUnitBJ(): Option<unit>;
declare function GetUnitAbilityLevelSwapped(abilcode: integer, whichUnit: unit): number;
declare function GetUnitDefaultPropWindowBJ(whichUnit: unit): number;
declare function GetUnitLifePercent(whichUnit: unit): number;
declare function GetUnitManaPercent(whichUnit: unit): number;
declare function GetUnitPropWindowBJ(whichUnit: unit): number;
declare function GetUnitsInRangeOfLocAll(radius: real, whichLocation: location): Option<group>;
declare function GetUnitsInRangeOfLocMatching(radius: real, whichLocation: location, filter: boolexpr): Option<group>;
declare function GetUnitsInRectAll(r: rect): Option<group>;
declare function GetUnitsInRectMatching(r: rect, filter: boolexpr): Option<group>;
declare function GetUnitsInRectOfPlayer(r: rect, whichPlayer: player): Option<group>;
declare function GetUnitsInRectOfPlayerFilter(): boolean;
declare function GetUnitsOfPlayerAll(whichPlayer: player): Option<group>;
declare function GetUnitsOfPlayerAndTypeId(whichPlayer: player, unitid: integer): Option<group>;
declare function GetUnitsOfPlayerAndTypeIdFilter(): boolean;
declare function GetUnitsOfPlayerMatching(whichPlayer: player, filter: boolexpr): Option<group>;
declare function GetUnitsOfTypeIdAll(unitid: integer): Option<group>;
declare function GetUnitsOfTypeIdAllFilter(): boolean;
declare function GetUnitsSelectedAll(whichPlayer: player): Option<group>;
declare function GetUnitStatePercent(whichUnit: unit, whichState: unitstate, whichMaxState: unitstate): number;
declare function GetUnitStateSwap(whichState: unitstate, whichUnit: unit): number;
declare function GroupAddGroup(sourceGroup: group, destGroup: group): void;
declare function GroupAddGroupEnum(): void;
declare function GroupAddUnitSimple(whichUnit: unit, whichGroup: group): void;
declare function GroupImmediateOrderBJ(whichGroup: group, order: string): boolean;
declare function GroupPickRandomUnit(whichGroup: group): Option<unit>;
declare function GroupPickRandomUnitEnum(): void;
declare function GroupPointOrderLocBJ(whichGroup: group, order: string, whichLocation: location): boolean;
declare function GroupRemoveGroup(sourceGroup: group, destGroup: group): void;
declare function GroupRemoveGroupEnum(): void;
declare function GroupRemoveUnitSimple(whichUnit: unit, whichGroup: group): void;
declare function GroupTargetDestructableOrder(whichGroup: group, order: string, targetWidget: widget): boolean;
declare function GroupTargetItemOrder(whichGroup: group, order: string, targetWidget: widget): boolean;
declare function GroupTargetOrderBJ(whichGroup: group, order: string, targetWidget: widget): boolean;
declare function GroupTrainOrderByIdBJ(g: group, unitId: integer): boolean;
declare function HaveSavedValue(key: integer, valueType: integer, missionKey: integer, table: hashtable): boolean;
declare function HaveStoredValue(key: string, valueType: integer, missionKey: string, cache: gamecache): boolean;
declare function IAbsBJ(a: integer): number;
declare function IMaxBJ(a: integer, b: integer): number;
declare function IMinBJ(a: integer, b: integer): number;
declare function IncUnitAbilityLevelSwapped(abilcode: integer, whichUnit: unit): number;
declare function InitBlizzard(): void;
declare function InitBlizzardGlobals(): void;
declare function InitDNCSounds(): void;
declare function InitGameCacheBJ(campaignFile: string): Option<gamecache>;
declare function InitGenericPlayerSlots(): void;
declare function InitHashtableBJ(): Option<hashtable>;
declare function InitMapRects(): void;
declare function InitNeutralBuildings(): void;
declare function InitQueuedTriggers(): void;
declare function InitRescuableBehaviorBJ(): void;
declare function InitSummonableCaps(): void;
declare function IntegerTertiaryOp(flag: boolean, valueA: integer, valueB: integer): number;
declare function IsCustomCampaignButtonVisibile(whichButton: integer): boolean;
declare function IsDawnDuskEnabled(): boolean;
declare function IsDestructableAliveBJ(d: destructable): boolean;
declare function IsDestructableDeadBJ(d: destructable): boolean;
declare function IsDestructableInvulnerableBJ(d: destructable): boolean;
declare function ISignBJ(a: integer): number;
declare function IsItemHiddenBJ(whichItem: item): boolean;
declare function IsPlayerFlagSetBJ(whichPlayerFlag: playerstate, whichPlayer: player): boolean;
declare function IsPlayerSlotState(whichPlayer: player, whichState: playerslotstate): boolean;
declare function IsPointBlightedBJ(where: location): boolean;
declare function IssueBuildOrderByIdLocBJ(whichPeon: unit, unitId: integer, loc: location): boolean;
declare function IssueHauntOrderAtLocBJ(whichPeon: unit, loc: location): boolean;
declare function IssueHauntOrderAtLocBJFilter(): boolean;
declare function IssueImmediateOrderBJ(whichUnit: unit, order: string): boolean;
declare function IssuePointOrderLocBJ(whichUnit: unit, order: string, whichLocation: location): boolean;
declare function IssueTargetDestructableOrder(whichUnit: unit, order: string, targetWidget: widget): boolean;
declare function IssueTargetItemOrder(whichUnit: unit, order: string, targetWidget: widget): boolean;
declare function IssueTargetOrderBJ(whichUnit: unit, order: string, targetWidget: widget): boolean;
declare function IssueTrainOrderByIdBJ(whichUnit: unit, unitId: integer): boolean;
declare function IssueUpgradeOrderByIdBJ(whichUnit: unit, techId: integer): boolean;
declare function IsTerrainPathableBJ(where: location, t: pathingtype): boolean;
declare function IsTriggerQueuedBJ(trig: trigger): boolean;
declare function IsTriggerQueueEmptyBJ(): boolean;
declare function IsUnitAliveBJ(whichUnit: unit): boolean;
declare function IsUnitDeadBJ(whichUnit: unit): boolean;
declare function IsUnitGroupDeadBJ(g: group): boolean;
declare function IsUnitGroupDeadBJEnum(): void;
declare function IsUnitGroupEmptyBJ(g: group): boolean;
declare function IsUnitGroupEmptyBJEnum(): void;
declare function IsUnitGroupInRectBJ(g: group, r: rect): boolean;
declare function IsUnitGroupInRectBJEnum(): void;
declare function IsUnitHiddenBJ(whichUnit: unit): boolean;
declare function IsUnitIllusionBJ(whichUnit: unit): boolean;
declare function IsUnitInTransportBJ(whichUnit: unit, whichTransport: unit): boolean;
declare function IsUnitLoadedBJ(whichUnit: unit): boolean;
declare function IsUnitPausedBJ(whichUnit: unit): boolean;
declare function ItemAddIndicatorBJ(whichItem: item, red: real, green: real, blue: real, transparency: real): void;
declare function KillSoundWhenDoneBJ(soundHandle: sound): void;
declare function LeaderboardAddItemBJ(whichPlayer: player, lb: leaderboard, label: string, value: integer): void;
declare function LeaderboardDisplayBJ(show: boolean, lb: leaderboard): void;
declare function LeaderboardGetIndexedPlayerBJ(position: integer, lb: leaderboard): Option<player>;
declare function LeaderboardGetItemCountBJ(lb: leaderboard): number;
declare function LeaderboardGetPlayerIndexBJ(whichPlayer: player, lb: leaderboard): number;
declare function LeaderboardHasPlayerItemBJ(lb: leaderboard, whichPlayer: player): boolean;
declare function LeaderboardRemovePlayerItemBJ(whichPlayer: player, lb: leaderboard): void;
declare function LeaderboardResizeBJ(lb: leaderboard): void;
declare function LeaderboardSetLabelBJ(lb: leaderboard, label: string): void;
declare function LeaderboardSetLabelColorBJ(lb: leaderboard, red: real, green: real, blue: real, transparency: real): void;
declare function LeaderboardSetPlayerItemLabelBJ(whichPlayer: player, lb: leaderboard, val: string): void;
declare function LeaderboardSetPlayerItemLabelColorBJ(whichPlayer: player, lb: leaderboard, red: real, green: real, blue: real, transparency: real): void;
declare function LeaderboardSetPlayerItemStyleBJ(whichPlayer: player, lb: leaderboard, showLabel: boolean, showValue: boolean, showIcon: boolean): void;
declare function LeaderboardSetPlayerItemValueBJ(whichPlayer: player, lb: leaderboard, val: integer): void;
declare function LeaderboardSetPlayerItemValueColorBJ(whichPlayer: player, lb: leaderboard, red: real, green: real, blue: real, transparency: real): void;
declare function LeaderboardSetStyleBJ(lb: leaderboard, showLabel: boolean, showNames: boolean, showValues: boolean, showIcons: boolean): void;
declare function LeaderboardSetValueColorBJ(lb: leaderboard, red: real, green: real, blue: real, transparency: real): void;
declare function LeaderboardSortItemsBJ(lb: leaderboard, sortType: integer, ascending: boolean): void;
declare function LeaderboardSortItemsByLabelBJ(lb: leaderboard, ascending: boolean): void;
declare function LeaderboardSortItemsByPlayerBJ(lb: leaderboard, ascending: boolean): void;
declare function LivingPlayerUnitsOfTypeIdFilter(): boolean;
declare function LoadAbilityHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<ability>;
declare function LoadBooleanBJ(key: integer, missionKey: integer, table: hashtable): boolean;
declare function LoadBooleanExprHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<boolexpr>;
declare function LoadButtonHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<button>;
declare function LoadDefeatConditionHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<defeatcondition>;
declare function LoadDestructableHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<destructable>;
declare function LoadDialogHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<dialog>;
declare function LoadEffectHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<effect>;
declare function LoadFogModifierHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<fogmodifier>;
declare function LoadFogStateHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<fogstate>;
declare function LoadForceHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<force>;
declare function LoadGameBJ(loadFileName: string, doScoreScreen: boolean): void;
declare function LoadGroupHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<group>;
declare function LoadHashtableHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<hashtable>;
declare function LoadImageHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<image>;
declare function LoadIntegerBJ(key: integer, missionKey: integer, table: hashtable): number;
declare function LoadItemHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<item>;
declare function LoadItemPoolHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<itempool>;
declare function LoadLeaderboardHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<leaderboard>;
declare function LoadLightningHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<lightning>;
declare function LoadLocationHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<location>;
declare function LoadMultiboardHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<multiboard>;
declare function LoadMultiboardItemHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<multiboarditem>;
declare function LoadPlayerHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<player>;
declare function LoadQuestHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<quest>;
declare function LoadQuestItemHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<questitem>;
declare function LoadRealBJ(key: integer, missionKey: integer, table: hashtable): number;
declare function LoadRectHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<rect>;
declare function LoadRegionHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<region>;
declare function LoadSoundHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<sound>;
declare function LoadStringBJ(key: integer, missionKey: integer, table: hashtable): Option<string>;
declare function LoadTextTagHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<texttag>;
declare function LoadTimerDialogHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<timerdialog>;
declare function LoadTimerHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<timer>;
declare function LoadTrackableHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<trackable>;
declare function LoadTriggerActionHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<triggeraction>;
declare function LoadTriggerConditionHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<triggercondition>;
declare function LoadTriggerEventHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<event>;
declare function LoadTriggerHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<trigger>;
declare function LoadUbersplatHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<ubersplat>;
declare function LoadUnitHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<unit>;
declare function LoadUnitPoolHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<unitpool>;
declare function LoadWidgetHandleBJ(key: integer, missionKey: integer, table: hashtable): Option<widget>;
declare function LockGameSpeedBJ(): void;
declare function LockGuardPosition(targ: unit): void;
declare function MakeUnitRescuableToForceBJ(whichUnit: unit, isRescuable: boolean, whichForce: force): void;
declare function MakeUnitRescuableToForceBJEnum(): void;
declare function MakeUnitsPassiveForPlayer(whichPlayer: player): void;
declare function MakeUnitsPassiveForPlayerEnum(): void;
declare function MakeUnitsPassiveForTeam(whichPlayer: player): void;
declare function MarkGameStarted(): void;
declare function MeleeCheckAddedUnit(addedUnit: unit): void;
declare function MeleeCheckForCrippledPlayers(): void;
declare function MeleeCheckForLosersAndVictors(): void;
declare function MeleeCheckForVictors(): Option<force>;
declare function MeleeCheckLostUnit(lostUnit: unit): void;
declare function MeleeClearExcessUnit(): void;
declare function MeleeClearExcessUnits(): void;
declare function MeleeClearNearbyUnits(x: real, y: real, range: real): void;
declare function MeleeCrippledPlayerTimeout(): void;
declare function MeleeDefeatDialogBJ(whichPlayer: player, leftGame: boolean): void;
declare function MeleeDoDefeat(whichPlayer: player): void;
declare function MeleeDoDefeatEnum(): void;
declare function MeleeDoDrawEnum(): void;
declare function MeleeDoLeave(whichPlayer: player): void;
declare function MeleeDoVictoryEnum(): void;
declare function MeleeEnumFindNearestMine(): void;
declare function MeleeExposeAllPlayers(): void;
declare function MeleeExposePlayer(whichPlayer: player, expose: boolean): void;
declare function MeleeFindNearestMine(src: location, range: real): Option<unit>;
declare function MeleeGetAllyCount(whichPlayer: player): number;
declare function MeleeGetAllyKeyStructureCount(whichPlayer: player): number;
declare function MeleeGetAllyStructureCount(whichPlayer: player): number;
declare function MeleeGetCrippledRevealedMessage(whichPlayer: player): Option<string>;
declare function MeleeGetCrippledTimerMessage(whichPlayer: player): Option<string>;
declare function MeleeGetCrippledWarningMessage(whichPlayer: player): Option<string>;
declare function MeleeGetLocWithinRect(src: location, r: rect): Option<location>;
declare function MeleeGetNearestValueWithin(val: real, minVal: real, maxVal: real): number;
declare function MeleeGetProjectedLoc(src: location, targ: location, distance: real, deltaAngle: real): Option<location>;
declare function MeleeGrantHeroItems(): void;
declare function MeleeGrantItemsToHero(whichUnit: unit): void;
declare function MeleeGrantItemsToHiredHero(): void;
declare function MeleeGrantItemsToTrainedHero(): void;
declare function MeleeInitPlayerSlots(): void;
declare function MeleeInitVictoryDefeat(): void;
declare function MeleePlayerIsCrippled(whichPlayer: player): boolean;
declare function MeleePlayerIsOpponent(playerIndex: integer, opponentIndex: integer): boolean;
declare function MeleeRandomHeroLoc(p: player, id1: integer, id2: integer, id3: integer, id4: integer, loc: location): Option<unit>;
declare function MeleeRemoveObservers(): void;
declare function MeleeStartingAI(): void;
declare function MeleeStartingHeroLimit(): void;
declare function MeleeStartingResources(): void;
declare function MeleeStartingUnits(): void;
declare function MeleeStartingUnitsForPlayer(whichRace: race, whichPlayer: player, loc: location, doHeroes: boolean): void;
declare function MeleeStartingUnitsHuman(whichPlayer: player, startLoc: location, doHeroes: boolean, doCamera: boolean, doPreload: boolean): void;
declare function MeleeStartingUnitsNightElf(whichPlayer: player, startLoc: location, doHeroes: boolean, doCamera: boolean, doPreload: boolean): void;
declare function MeleeStartingUnitsOrc(whichPlayer: player, startLoc: location, doHeroes: boolean, doCamera: boolean, doPreload: boolean): void;
declare function MeleeStartingUnitsUndead(whichPlayer: player, startLoc: location, doHeroes: boolean, doCamera: boolean, doPreload: boolean): void;
declare function MeleeStartingUnitsUnknownRace(whichPlayer: player, startLoc: location, doHeroes: boolean, doCamera: boolean, doPreload: boolean): void;
declare function MeleeStartingVisibility(): void;
declare function MeleeTournamentFinishNowRuleA(multiplier: integer): void;
declare function MeleeTrainedUnitIsHeroBJFilter(): boolean;
declare function MeleeTriggerActionAllianceChange(): void;
declare function MeleeTriggerActionConstructCancel(): void;
declare function MeleeTriggerActionPlayerDefeated(): void;
declare function MeleeTriggerActionPlayerLeft(): void;
declare function MeleeTriggerActionUnitConstructionStart(): void;
declare function MeleeTriggerActionUnitDeath(): void;
declare function MeleeTriggerTournamentFinishNow(): void;
declare function MeleeTriggerTournamentFinishSoon(): void;
declare function MeleeVictoryDialogBJ(whichPlayer: player, leftGame: boolean): void;
declare function MeleeWasUserPlayer(whichPlayer: player): boolean;
declare function ModifyGateBJ(gateOperation: integer, d: destructable): void;
declare function ModifyHeroSkillPoints(whichHero: unit, modifyMethod: integer, value: integer): boolean;
declare function ModifyHeroStat(whichStat: integer, whichHero: unit, modifyMethod: integer, value: integer): void;
declare function ModuloInteger(dividend: integer, divisor: integer): number;
declare function ModuloReal(dividend: real, divisor: real): number;
declare function MoveLightningLoc(whichBolt: lightning, where1: location, where2: location): boolean;
declare function MultiboardAllowDisplayBJ(flag: boolean): void;
declare function MultiboardDisplayBJ(show: boolean, mb: multiboard): void;
declare function MultiboardMinimizeBJ(minimize: boolean, mb: multiboard): void;
declare function MultiboardSetItemColorBJ(mb: multiboard, col: integer, row: integer, red: real, green: real, blue: real, transparency: real): void;
declare function MultiboardSetItemIconBJ(mb: multiboard, col: integer, row: integer, iconFileName: string): void;
declare function MultiboardSetItemStyleBJ(mb: multiboard, col: integer, row: integer, showValue: boolean, showIcon: boolean): void;
declare function MultiboardSetItemValueBJ(mb: multiboard, col: integer, row: integer, val: string): void;
declare function MultiboardSetItemWidthBJ(mb: multiboard, col: integer, row: integer, width: real): void;
declare function MultiboardSetTitleTextColorBJ(mb: multiboard, red: real, green: real, blue: real, transparency: real): void;
declare function NearbyElevatorExists(x: real, y: real): boolean;
declare function NearbyElevatorExistsEnum(): void;
declare function NudgeItemsInRectEnum(): void;
declare function NudgeObjectsInRect(nudgeArea: rect): void;
declare function NudgeUnitsInRectEnum(): void;
declare function OffsetLocation(loc: location, dx: real, dy: real): Option<location>;
declare function OffsetRectBJ(r: rect, dx: real, dy: real): Option<rect>;
declare function OneOnOneInitPlayerSlots(): void;
declare function OrderId2StringBJ(orderId: integer): Option<string>;
declare function PanCameraToForPlayer(whichPlayer: player, x: real, y: real): void;
declare function PanCameraToLocForPlayer(whichPlayer: player, loc: location): void;
declare function PanCameraToTimedForPlayer(whichPlayer: player, x: real, y: real, duration: real): void;
declare function PanCameraToTimedLocForPlayer(whichPlayer: player, loc: location, duration: real): void;
declare function PanCameraToTimedLocWithZForPlayer(whichPlayer: player, loc: location, zOffset: real, duration: real): void;
declare function PauseAllUnitsBJ(pause: boolean): void;
declare function PauseAllUnitsBJEnum(): void;
declare function PauseGameOff(): void;
declare function PauseGameOn(): void;
declare function PauseTimerBJ(pause: boolean, whichTimer: timer): void;
declare function PauseUnitBJ(pause: boolean, whichUnit: unit): void;
declare function PercentTo255(percentage: real): number;
declare function PercentToInt(percentage: real, max: integer): number;
declare function PerformStockUpdates(): void;
declare function PickMeleeAI(num: player, s1: string, s2: string, s3: string): void;
declare function PingMinimapForForce(whichForce: force, x: real, y: real, duration: real): void;
declare function PingMinimapForForceEx(whichForce: force, x: real, y: real, duration: real, style: integer, red: real, green: real, blue: real): void;
declare function PingMinimapForPlayer(whichPlayer: player, x: real, y: real, duration: real): void;
declare function PingMinimapLocForForce(whichForce: force, loc: location, duration: real): void;
declare function PingMinimapLocForForceEx(whichForce: force, loc: location, duration: real, style: integer, red: real, green: real, blue: real): void;
declare function PingMinimapLocForPlayer(whichPlayer: player, loc: location, duration: real): void;
declare function PlayerGetLeaderboardBJ(whichPlayer: player): Option<leaderboard>;
declare function PlayersAreCoAllied(playerA: player, playerB: player): boolean;
declare function PlayMusicBJ(musicFileName: string): void;
declare function PlayMusicExBJ(musicFileName: string, startingOffset: real, fadeInTime: real): void;
declare function PlaySound(soundName: string): void;
declare function PlaySoundAtPointBJ(soundHandle: sound, volumePercent: real, loc: location, z: real): void;
declare function PlaySoundBJ(soundHandle: sound): void;
declare function PlaySoundFromOffsetBJ(soundHandle: sound, volumePercent: real, startingOffset: real): void;
declare function PlaySoundOnUnitBJ(soundHandle: sound, volumePercent: real, whichUnit: unit): void;
declare function PlayThematicMusicBJ(musicName: string): void;
declare function PlayThematicMusicExBJ(musicName: string, startingOffset: real): void;
declare function PolarProjectionBJ(source: location, dist: real, angle: real): Option<location>;
declare function PolledWait(duration: real): void;
declare function PostTriggerExecuteBJ(trig: trigger, checkConditions: boolean): boolean;
declare function QuestItemSetCompletedBJ(whichQuestItem: questitem, completed: boolean): void;
declare function QuestItemSetDescriptionBJ(whichQuestItem: questitem, description: string): void;
declare function QuestMessageBJ(f: force, messageType: integer, message: string): void;
declare function QuestSetCompletedBJ(whichQuest: quest, completed: boolean): void;
declare function QuestSetDescriptionBJ(whichQuest: quest, description: string): void;
declare function QuestSetDiscoveredBJ(whichQuest: quest, discovered: boolean): void;
declare function QuestSetEnabledBJ(enabled: boolean, whichQuest: quest): void;
declare function QuestSetFailedBJ(whichQuest: quest, failed: boolean): void;
declare function QuestSetTitleBJ(whichQuest: quest, title: string): void;
declare function QueueDestructableAnimationBJ(d: destructable, whichAnimation: string): void;
declare function QueuedTriggerAddBJ(trig: trigger, checkConditions: boolean): boolean;
declare function QueuedTriggerAttemptExec(): boolean;
declare function QueuedTriggerCheck(): void;
declare function QueuedTriggerClearBJ(): void;
declare function QueuedTriggerClearInactiveBJ(): void;
declare function QueuedTriggerCountBJ(): number;
declare function QueuedTriggerDoneBJ(): void;
declare function QueuedTriggerGetIndex(trig: trigger): number;
declare function QueuedTriggerRemoveBJ(trig: trigger): void;
declare function QueuedTriggerRemoveByIndex(trigIndex: integer): boolean;
declare function QueueUnitAnimationBJ(whichUnit: unit, whichAnimation: string): void;
declare function RAbsBJ(a: real): number;
declare function RandomDestructableInRectBJ(r: rect, filter: boolexpr): Option<destructable>;
declare function RandomDestructableInRectBJEnum(): void;
declare function RandomDestructableInRectSimpleBJ(r: rect): Option<destructable>;
declare function RandomDistAddItem(inID: integer, inChance: integer): void;
declare function RandomDistChoose(): number;
declare function RandomDistReset(): void;
declare function RandomItemInRectBJ(r: rect, filter: boolexpr): Option<item>;
declare function RandomItemInRectBJEnum(): void;
declare function RandomItemInRectSimpleBJ(r: rect): Option<item>;
declare function RectContainsCoords(r: rect, x: real, y: real): boolean;
declare function RectContainsItem(whichItem: item, r: rect): boolean;
declare function RectContainsLoc(r: rect, loc: location): boolean;
declare function RectContainsUnit(r: rect, whichUnit: unit): boolean;
declare function RectFromCenterSizeBJ(center: location, width: real, height: real): Option<rect>;
declare function ReducePlayerTechMaxAllowed(whichPlayer: player, techId: integer, limit: integer): void;
declare function RegisterDestDeathInRegionEnum(): void;
declare function RemoveItemFromStockBJ(itemId: integer, whichUnit: unit): void;
declare function RemovePlayerPreserveUnitsBJ(whichPlayer: player, gameResult: playergameresult, leftGame: boolean): void;
declare function RemovePurchasedItem(): void;
declare function RemoveSaveDirectoryBJ(sourceDirName: string): boolean;
declare function RemoveUnitFromStockBJ(unitId: integer, whichUnit: unit): void;
declare function RemoveWeatherEffectBJ(whichWeatherEffect: weathereffect): void;
declare function RenameSaveDirectoryBJ(sourceDirName: string, destDirName: string): boolean;
declare function ReplaceUnitBJ(whichUnit: unit, newUnitId: integer, unitStateMethod: integer): Option<unit>;
declare function RescueUnitBJ(whichUnit: unit, rescuer: player, changeColor: boolean): void;
declare function ResetTerrainFogBJ(): void;
declare function ResetToGameCameraForPlayer(whichPlayer: player, duration: real): void;
declare function ResetUnitAnimation(whichUnit: unit): void;
declare function RestoreUnitLocFacingAngleBJ(key: string, missionKey: string, cache: gamecache, forWhichPlayer: player, loc: location, facing: real): Option<unit>;
declare function RestoreUnitLocFacingPointBJ(key: string, missionKey: string, cache: gamecache, forWhichPlayer: player, loc: location, lookAt: location): Option<unit>;
declare function ResumeMusicBJ(): void;
declare function RMaxBJ(a: real, b: real): number;
declare function RMinBJ(a: real, b: real): number;
declare function RotateCameraAroundLocBJ(degrees: real, loc: location, whichPlayer: player, duration: real): void;
declare function RSignBJ(a: real): number;
declare function SaveAbilityHandleBJ(whichAbility: ability, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveAgentHandleBJ(whichAgent: agent, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveAndChangeLevelBJ(saveFileName: string, newLevel: string, doScoreScreen: boolean): void;
declare function SaveAndLoadGameBJ(saveFileName: string, loadFileName: string, doScoreScreen: boolean): void;
declare function SaveBooleanBJ(value: boolean, key: integer, missionKey: integer, table: hashtable): void;
declare function SaveBooleanExprHandleBJ(whichBoolexpr: boolexpr, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveButtonHandleBJ(whichButton: button, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveDefeatConditionHandleBJ(whichDefeatcondition: defeatcondition, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveDestructableHandleBJ(whichDestructable: destructable, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveDialogHandleBJ(whichDialog: dialog, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveDyingWidget(): void;
declare function SaveEffectHandleBJ(whichEffect: effect, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveFogModifierHandleBJ(whichFogModifier: fogmodifier, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveFogStateHandleBJ(whichFogState: fogstate, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveForceHandleBJ(whichForce: force, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveGameCacheBJ(cache: gamecache): boolean;
declare function SaveGroupHandleBJ(whichGroup: group, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveHashtableHandleBJ(whichHashtable: hashtable, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveImageHandleBJ(whichImage: image, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveIntegerBJ(value: integer, key: integer, missionKey: integer, table: hashtable): void;
declare function SaveItemHandleBJ(whichItem: item, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveItemPoolHandleBJ(whichItempool: itempool, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveLeaderboardHandleBJ(whichLeaderboard: leaderboard, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveLightningHandleBJ(whichLightning: lightning, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveLocationHandleBJ(whichLocation: location, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveMultiboardHandleBJ(whichMultiboard: multiboard, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveMultiboardItemHandleBJ(whichMultiboarditem: multiboarditem, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SavePlayerHandleBJ(whichPlayer: player, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveQuestHandleBJ(whichQuest: quest, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveQuestItemHandleBJ(whichQuestitem: questitem, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveRealBJ(value: real, key: integer, missionKey: integer, table: hashtable): void;
declare function SaveRectHandleBJ(whichRect: rect, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveRegionHandleBJ(whichRegion: region, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveSoundHandleBJ(whichSound: sound, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveStringBJ(value: string, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveTextTagHandleBJ(whichTexttag: texttag, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveTimerDialogHandleBJ(whichTimerdialog: timerdialog, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveTimerHandleBJ(whichTimer: timer, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveTrackableHandleBJ(whichTrackable: trackable, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveTriggerActionHandleBJ(whichTriggeraction: triggeraction, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveTriggerConditionHandleBJ(whichTriggercondition: triggercondition, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveTriggerEventHandleBJ(whichEvent: event, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveTriggerHandleBJ(whichTrigger: trigger, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveUbersplatHandleBJ(whichUbersplat: ubersplat, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveUnitHandleBJ(whichUnit: unit, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveUnitPoolHandleBJ(whichUnitpool: unitpool, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SaveWidgetHandleBJ(whichWidget: widget, key: integer, missionKey: integer, table: hashtable): boolean;
declare function SelectGroupBJ(g: group): void;
declare function SelectGroupBJEnum(): void;
declare function SelectGroupForPlayerBJ(g: group, whichPlayer: player): void;
declare function SelectUnitAdd(whichUnit: unit): void;
declare function SelectUnitAddForPlayer(whichUnit: unit, whichPlayer: player): void;
declare function SelectUnitForPlayerSingle(whichUnit: unit, whichPlayer: player): void;
declare function SelectUnitRemove(whichUnit: unit): void;
declare function SelectUnitRemoveForPlayer(whichUnit: unit, whichPlayer: player): void;
declare function SelectUnitSingle(whichUnit: unit): void;
declare function SetAmbientDaySound(inLabel: string): void;
declare function SetAmbientNightSound(inLabel: string): void;
declare function SetBlightRadiusLocBJ(addBlight: boolean, whichPlayer: player, loc: location, radius: real): void;
declare function SetBlightRectBJ(addBlight: boolean, whichPlayer: player, r: rect): void;
declare function SetCameraBoundsToRect(r: rect): void;
declare function SetCameraBoundsToRectForPlayerBJ(whichPlayer: player, r: rect): void;
declare function SetCameraFieldForPlayer(whichPlayer: player, whichField: camerafield, value: real, duration: real): void;
declare function SetCameraOrientControllerForPlayerBJ(whichPlayer: player, whichUnit: unit, xoffset: real, yoffset: real): void;
declare function SetCameraPositionForPlayer(whichPlayer: player, x: real, y: real): void;
declare function SetCameraPositionLocForPlayer(whichPlayer: player, loc: location): void;
declare function SetCameraQuickPositionForPlayer(whichPlayer: player, x: real, y: real): void;
declare function SetCameraQuickPositionLoc(loc: location): void;
declare function SetCameraQuickPositionLocForPlayer(whichPlayer: player, loc: location): void;
declare function SetCameraTargetControllerNoZForPlayer(whichPlayer: player, whichUnit: unit, xoffset: real, yoffset: real, inheritOrientation: boolean): void;
declare function SetCampaignAvailableBJ(available: boolean, campaignNumber: integer): void;
declare function SetCampaignMenuRaceBJ(campaignNumber: integer): void;
declare function SetCinematicAvailableBJ(available: boolean, cinematicIndex: integer): void;
declare function SetCinematicCameraForPlayer(whichPlayer: player, cameraModelFile: string): void;
declare function SetCinematicSceneBJ(soundHandle: sound, portraitUnitId: integer, color: playercolor, speakerTitle: string, text: string, sceneDuration: real, voiceoverDuration: real): void;
declare function SetCineModeVolumeGroupsBJ(): void;
declare function SetCineModeVolumeGroupsImmediateBJ(): void;
declare function SetDestAnimationSpeedPercent(d: destructable, percentScale: real): void;
declare function SetDestructableAnimationBJ(d: destructable, whichAnimation: string): void;
declare function SetDestructableInvulnerableBJ(d: destructable, flag: boolean): void;
declare function SetDestructableLifePercentBJ(d: destructable, percent: real): void;
declare function SetDestructableMaxLifeBJ(d: destructable, max: real): void;
declare function SetDNCSoundsDawn(): void;
declare function SetDNCSoundsDay(): void;
declare function SetDNCSoundsDusk(): void;
declare function SetDNCSoundsNight(): void;
declare function SetDoodadAnimationBJ(animName: string, doodadID: integer, radius: real, center: location): void;
declare function SetDoodadAnimationRectBJ(animName: string, doodadID: integer, r: rect): void;
declare function SetForceAllianceStateBJ(sourceForce: force, targetForce: force, allianceState: integer): void;
declare function SetForLoopIndexA(newIndex: integer): void;
declare function SetForLoopIndexB(newIndex: integer): void;
declare function SetHeroLevelBJ(whichHero: unit, newLevel: integer, showEyeCandy: boolean): void;
declare function SetHeroStat(whichHero: unit, whichStat: integer, value: integer): void;
declare function SetImageColorBJ(whichImage: image, red: real, green: real, blue: real, alpha: real): void;
declare function SetImagePositionBJ(whichImage: image, where: location, zOffset: real): void;
declare function SetItemDropOnDeathBJ(whichItem: item, flag: boolean): void;
declare function SetItemDroppableBJ(whichItem: item, flag: boolean): void;
declare function SetItemInvulnerableBJ(whichItem: item, flag: boolean): void;
declare function SetItemLifeBJ(whichWidget: widget, life: real): void;
declare function SetItemPlayerBJ(whichItem: item, whichPlayer: player, changeColor: boolean): void;
declare function SetItemPositionLoc(whichItem: item, loc: location): void;
declare function SetItemVisibleBJ(show: boolean, whichItem: item): void;
declare function SetLightningColorBJ(whichBolt: lightning, r: real, g: real, b: real, a: real): boolean;
declare function SetMapMusicIndexedBJ(musicName: string, index: integer): void;
declare function SetMapMusicRandomBJ(musicName: string): void;
declare function SetMissionAvailableBJ(available: boolean, missionIndex: integer): void;
declare function SetMusicOffsetBJ(newOffset: real): void;
declare function SetMusicVolumeBJ(volumePercent: real): void;
declare function SetNextLevelBJ(nextLevel: string): void;
declare function SetPlayerAbilityAvailableBJ(avail: boolean, abilid: integer, whichPlayer: player): void;
declare function SetPlayerAllianceBJ(sourcePlayer: player, whichAllianceSetting: alliancetype, value: boolean, otherPlayer: player): void;
declare function SetPlayerAllianceStateAllyBJ(sourcePlayer: player, otherPlayer: player, flag: boolean): void;
declare function SetPlayerAllianceStateBJ(sourcePlayer: player, otherPlayer: player, allianceState: integer): void;
declare function SetPlayerAllianceStateControlBJ(sourcePlayer: player, otherPlayer: player, flag: boolean): void;
declare function SetPlayerAllianceStateFullControlBJ(sourcePlayer: player, otherPlayer: player, flag: boolean): void;
declare function SetPlayerAllianceStateVisionBJ(sourcePlayer: player, otherPlayer: player, flag: boolean): void;
declare function SetPlayerColorBJ(whichPlayer: player, color: playercolor, changeExisting: boolean): void;
declare function SetPlayerColorBJEnum(): void;
declare function SetPlayerFlagBJ(whichPlayerFlag: playerstate, flag: boolean, whichPlayer: player): void;
declare function SetPlayerHandicapBJ(whichPlayer: player, handicapPercent: real): void;
declare function SetPlayerHandicapXPBJ(whichPlayer: player, handicapPercent: real): void;
declare function SetPlayerMaxHeroesAllowed(maximum: integer, whichPlayer: player): void;
declare function SetPlayerOnScoreScreenBJ(flag: boolean, whichPlayer: player): void;
declare function SetPlayerSlotAvailable(whichPlayer: player, control: mapcontrol): void;
declare function SetPlayerStateBJ(whichPlayer: player, whichPlayerState: playerstate, value: integer): void;
declare function SetPlayerTaxRateBJ(rate: integer, whichResource: playerstate, sourcePlayer: player, otherPlayer: player): void;
declare function SetPlayerTechMaxAllowedSwap(techid: integer, maximum: integer, whichPlayer: player): void;
declare function SetPlayerTechResearchedSwap(techid: integer, levels: integer, whichPlayer: player): void;
declare function SetPlayerUnitAvailableBJ(unitId: integer, allowed: boolean, whichPlayer: player): void;
declare function SetRescueBuildingColorChangeBJ(changeColor: boolean): void;
declare function SetRescueUnitColorChangeBJ(changeColor: boolean): void;
declare function SetSoundConeAnglesBJ(soundHandle: sound, inside: real, outside: real, outsideVolumePercent: real): void;
declare function SetSoundDistanceCutoffBJ(soundHandle: sound, cutoff: real): void;
declare function SetSoundOffsetBJ(newOffset: real, soundHandle: sound): void;
declare function SetSoundPitchBJ(soundHandle: sound, pitch: real): void;
declare function SetSoundPositionLocBJ(soundHandle: sound, loc: location, z: real): void;
declare function SetSoundVolumeBJ(soundHandle: sound, volumePercent: real): void;
declare function SetSpeechVolumeGroupsBJ(): void;
declare function SetSpeechVolumeGroupsImmediateBJ(): void;
declare function SetStackedSoundBJ(add: boolean, soundHandle: sound, r: rect): void;
declare function SetTerrainFogExBJ(style: integer, zstart: real, zend: real, density: real, red: real, green: real, blue: real): void;
declare function SetTerrainPathableBJ(where: location, t: pathingtype, flag: boolean): void;
declare function SetTerrainTypeBJ(where: location, terrainType: integer, variation: integer, area: integer, shape: integer): void;
declare function SetTextTagAgeBJ(tt: texttag, age: real): void;
declare function SetTextTagColorBJ(tt: texttag, red: real, green: real, blue: real, transparency: real): void;
declare function SetTextTagFadepointBJ(tt: texttag, fadepoint: real): void;
declare function SetTextTagLifespanBJ(tt: texttag, lifespan: real): void;
declare function SetTextTagPermanentBJ(tt: texttag, flag: boolean): void;
declare function SetTextTagPosBJ(tt: texttag, loc: location, zOffset: real): void;
declare function SetTextTagPosUnitBJ(tt: texttag, whichUnit: unit, zOffset: real): void;
declare function SetTextTagSuspendedBJ(tt: texttag, flag: boolean): void;
declare function SetTextTagTextBJ(tt: texttag, s: string, size: real): void;
declare function SetTextTagVelocityBJ(tt: texttag, speed: real, angle: real): void;
declare function SetThematicMusicOffsetBJ(newOffset: real): void;
declare function SetTimeOfDay(whatTime: real): void;
declare function SetTimeOfDayScalePercentBJ(scalePercent: real): void;
declare function SetUnitAbilityLevelSwapped(abilcode: integer, whichUnit: unit, level: integer): number;
declare function SetUnitAcquireRangeBJ(whichUnit: unit, acquireRange: real): void;
declare function SetUnitBlendTimeBJ(whichUnit: unit, blendTime: real): void;
declare function SetUnitExplodedBJ(whichUnit: unit, exploded: boolean): void;
declare function SetUnitFacingToFaceLocTimed(whichUnit: unit, target: location, duration: real): void;
declare function SetUnitFacingToFaceUnitTimed(whichUnit: unit, target: unit, duration: real): void;
declare function SetUnitFlyHeightBJ(whichUnit: unit, newHeight: real, rate: real): void;
declare function SetUnitLifeBJ(whichUnit: unit, newValue: real): void;
declare function SetUnitLifePercentBJ(whichUnit: unit, percent: real): void;
declare function SetUnitManaBJ(whichUnit: unit, newValue: real): void;
declare function SetUnitManaPercentBJ(whichUnit: unit, percent: real): void;
declare function SetUnitPositionLocFacingBJ(whichUnit: unit, loc: location, facing: real): void;
declare function SetUnitPositionLocFacingLocBJ(whichUnit: unit, loc: location, lookAt: location): void;
declare function SetUnitPropWindowBJ(whichUnit: unit, propWindow: real): void;
declare function SetUnitRallyDestructable(whichUnit: unit, targDest: destructable): void;
declare function SetUnitRallyPoint(whichUnit: unit, targPos: location): void;
declare function SetUnitRallyUnit(whichUnit: unit, targUnit: unit): void;
declare function SetUnitScalePercent(whichUnit: unit, percentScaleX: real, percentScaleY: real, percentScaleZ: real): void;
declare function SetUnitTimeScalePercent(whichUnit: unit, percentScale: real): void;
declare function SetUnitTurnSpeedBJ(whichUnit: unit, turnSpeed: real): void;
declare function SetUnitUseFoodBJ(enable: boolean, whichUnit: unit): void;
declare function SetUnitVertexColorBJ(whichUnit: unit, red: real, green: real, blue: real, transparency: real): void;
declare function SetUserControlForceOff(whichForce: force): void;
declare function SetUserControlForceOn(whichForce: force): void;
declare function SetWaterBaseColorBJ(red: real, green: real, blue: real, transparency: real): void;
declare function ShareEverythingWithTeam(whichPlayer: player): void;
declare function ShareEverythingWithTeamAI(whichPlayer: player): void;
declare function ShowCustomCampaignButton(show: boolean, whichButton: integer): void;
declare function ShowDestructableBJ(flag: boolean, d: destructable): void;
declare function ShowImageBJ(flag: boolean, whichImage: image): void;
declare function ShowInterfaceForceOff(whichForce: force, fadeDuration: real): void;
declare function ShowInterfaceForceOn(whichForce: force, fadeDuration: real): void;
declare function ShowTextTagForceBJ(show: boolean, tt: texttag, whichForce: force): void;
declare function ShowUbersplatBJ(flag: boolean, whichSplat: ubersplat): void;
declare function ShowUnitHide(whichUnit: unit): void;
declare function ShowUnitShow(whichUnit: unit): void;
declare function SinBJ(degrees: real): number;
declare function SmartCameraPanBJ(whichPlayer: player, loc: location, duration: real): void;
declare function StartSoundForPlayerBJ(whichPlayer: player, soundHandle: sound): void;
declare function StartStockUpdates(): void;
declare function StartTimerBJ(t: timer, periodic: boolean, timeout: real): Option<timer>;
declare function StopCameraForPlayerBJ(whichPlayer: player): void;
declare function StopMusicBJ(fadeOut: boolean): void;
declare function StopSoundBJ(soundHandle: sound, fadeOut: boolean): void;
declare function StoreBooleanBJ(value: boolean, key: string, missionKey: string, cache: gamecache): void;
declare function StoreIntegerBJ(value: integer, key: string, missionKey: string, cache: gamecache): void;
declare function StoreRealBJ(value: real, key: string, missionKey: string, cache: gamecache): void;
declare function StoreStringBJ(value: string, key: string, missionKey: string, cache: gamecache): boolean;
declare function StoreUnitBJ(whichUnit: unit, key: string, missionKey: string, cache: gamecache): boolean;
declare function String2OrderIdBJ(orderIdString: string): number;
declare function String2UnitIdBJ(unitIdString: string): number;
declare function StringHashBJ(s: string): number;
declare function StringIdentity(theString: string): Option<string>;
declare function SubStringBJ(source: string, start: integer, end: integer): Option<string>;
declare function SuspendHeroXPBJ(flag: boolean, whichHero: unit): void;
declare function TanBJ(degrees: real): number;
declare function TeamInitPlayerSlots(teamCount: integer): void;
declare function TerrainDeformationCraterBJ(duration: real, permanent: boolean, where: location, radius: real, depth: real): Option<terraindeformation>;
declare function TerrainDeformationRandomBJ(duration: real, where: location, radius: real, minDelta: real, maxDelta: real, updateInterval: real): Option<terraindeformation>;
declare function TerrainDeformationRippleBJ(duration: real, limitNeg: boolean, where: location, startRadius: real, endRadius: real, depth: real, wavePeriod: real, waveWidth: real): Option<terraindeformation>;
declare function TerrainDeformationStopBJ(deformation: terraindeformation, duration: real): void;
declare function TerrainDeformationWaveBJ(duration: real, source: location, target: location, radius: real, depth: real, trailDelay: real): Option<terraindeformation>;
declare function TextTagSize2Height(size: real): number;
declare function TextTagSpeed2Velocity(speed: real): number;
declare function TimerDialogDisplayBJ(show: boolean, td: timerdialog): void;
declare function TimerDialogDisplayForPlayerBJ(show: boolean, td: timerdialog, whichPlayer: player): void;
declare function TimerDialogSetSpeedBJ(td: timerdialog, speedMultFactor: real): void;
declare function TimerDialogSetTimeColorBJ(td: timerdialog, red: real, green: real, blue: real, transparency: real): void;
declare function TimerDialogSetTitleBJ(td: timerdialog, title: string): void;
declare function TimerDialogSetTitleColorBJ(td: timerdialog, red: real, green: real, blue: real, transparency: real): void;
declare function TransmissionFromUnitTypeWithNameBJ(toForce: force, fromPlayer: player, unitId: integer, unitName: string, loc: location, soundHandle: sound, message: string, timeType: integer, timeVal: real, wait: boolean): void;
declare function TransmissionFromUnitWithNameBJ(toForce: force, whichUnit: unit, unitName: string, soundHandle: sound, message: string, timeType: integer, timeVal: real, wait: boolean): void;
declare function TriggerActionUnitRescuedBJ(): void;
declare function TriggerExecuteBJ(trig: trigger, checkConditions: boolean): boolean;
declare function TriggerRegisterAnyUnitEventBJ(trig: trigger, whichEvent: playerunitevent): void;
declare function TriggerRegisterBuildSubmenuEventBJ(trig: trigger): Option<event>;
declare function TriggerRegisterDestDeathInRegionEvent(trig: trigger, r: rect): void;
declare function TriggerRegisterDialogEventBJ(trig: trigger, whichDialog: dialog): Option<event>;
declare function TriggerRegisterDistanceBetweenUnits(trig: trigger, whichUnit: unit, condition: boolexpr, range: real): Option<event>;
declare function TriggerRegisterEnterRectSimple(trig: trigger, r: rect): Option<event>;
declare function TriggerRegisterEnterRegionSimple(trig: trigger, whichRegion: region): Option<event>;
declare function TriggerRegisterGameLoadedEventBJ(trig: trigger): Option<event>;
declare function TriggerRegisterGameSavedEventBJ(trig: trigger): Option<event>;
declare function TriggerRegisterGameStateEventTimeOfDay(trig: trigger, opcode: limitop, limitval: real): Option<event>;
declare function TriggerRegisterLeaveRectSimple(trig: trigger, r: rect): Option<event>;
declare function TriggerRegisterLeaveRegionSimple(trig: trigger, whichRegion: region): Option<event>;
declare function TriggerRegisterPlayerEventAllianceChanged(trig: trigger, whichPlayer: player): Option<event>;
declare function TriggerRegisterPlayerEventDefeat(trig: trigger, whichPlayer: player): Option<event>;
declare function TriggerRegisterPlayerEventEndCinematic(trig: trigger, whichPlayer: player): Option<event>;
declare function TriggerRegisterPlayerEventLeave(trig: trigger, whichPlayer: player): Option<event>;
declare function TriggerRegisterPlayerEventVictory(trig: trigger, whichPlayer: player): Option<event>;
declare function TriggerRegisterPlayerKeyEventBJ(trig: trigger, whichPlayer: player, keType: integer, keKey: integer): Option<event>;
declare function TriggerRegisterPlayerSelectionEventBJ(trig: trigger, whichPlayer: player, selected: boolean): Option<event>;
declare function TriggerRegisterPlayerUnitEventSimple(trig: trigger, whichPlayer: player, whichEvent: playerunitevent): Option<event>;
declare function TriggerRegisterShowSkillEventBJ(trig: trigger): Option<event>;
declare function TriggerRegisterTimerEventPeriodic(trig: trigger, timeout: real): Option<event>;
declare function TriggerRegisterTimerEventSingle(trig: trigger, timeout: real): Option<event>;
declare function TriggerRegisterTimerExpireEventBJ(trig: trigger, t: timer): Option<event>;
declare function TriggerRegisterUnitInRangeSimple(trig: trigger, range: real, whichUnit: unit): Option<event>;
declare function TriggerRegisterUnitLifeEvent(trig: trigger, whichUnit: unit, opcode: limitop, limitval: real): Option<event>;
declare function TriggerRegisterUnitManaEvent(trig: trigger, whichUnit: unit, opcode: limitop, limitval: real): Option<event>;
declare function TryInitCinematicBehaviorBJ(): void;
declare function TryInitRescuableTriggersBJ(): void;
declare function UnitAddAbilityBJ(abilityId: integer, whichUnit: unit): boolean;
declare function UnitAddIndicatorBJ(whichUnit: unit, red: real, green: real, blue: real, transparency: real): void;
declare function UnitAddItemByIdSwapped(itemId: integer, whichHero: unit): Option<item>;
declare function UnitAddItemSwapped(whichItem: item, whichHero: unit): boolean;
declare function UnitAddTypeBJ(whichType: unittype, whichUnit: unit): boolean;
declare function UnitApplyTimedLifeBJ(duration: real, buffId: integer, whichUnit: unit): void;
declare function UnitCanSleepBJ(whichUnit: unit): boolean;
declare function UnitCountBuffsExBJ(polarity: integer, resist: integer, whichUnit: unit, bTLife: boolean, bAura: boolean): number;
declare function UnitDamagePointLoc(whichUnit: unit, delay: real, radius: real, loc: location, amount: real, whichAttack: attacktype, whichDamage: damagetype): boolean;
declare function UnitDamageTargetBJ(whichUnit: unit, target: unit, amount: real, whichAttack: attacktype, whichDamage: damagetype): boolean;
declare function UnitDropItem(inUnit: unit, inItemID: integer): Option<item>;
declare function UnitDropItemPointBJ(whichUnit: unit, whichItem: item, x: real, y: real): boolean;
declare function UnitDropItemPointLoc(whichUnit: unit, whichItem: item, loc: location): boolean;
declare function UnitDropItemSlotBJ(whichUnit: unit, whichItem: item, slot: integer): boolean;
declare function UnitDropItemTargetBJ(whichUnit: unit, whichItem: item, target: widget): boolean;
declare function UnitGenerateAlarms(whichUnit: unit, generate: boolean): boolean;
declare function UnitHasBuffBJ(whichUnit: unit, buffcode: integer): boolean;
declare function UnitHasItemOfTypeBJ(whichUnit: unit, itemId: integer): boolean;
declare function UnitId2OrderIdBJ(unitId: integer): number;
declare function UnitId2StringBJ(unitId: integer): Option<string>;
declare function UnitInventoryCount(whichUnit: unit): number;
declare function UnitInventorySizeBJ(whichUnit: unit): number;
declare function UnitIsSleepingBJ(whichUnit: unit): boolean;
declare function UnitItemInSlotBJ(whichUnit: unit, itemSlot: integer): Option<item>;
declare function UnitMakeAbilityPermanentBJ(permanent: boolean, abilityId: integer, whichUnit: unit): boolean;
declare function UnitPauseTimedLifeBJ(flag: boolean, whichUnit: unit): void;
declare function UnitRemoveAbilityBJ(abilityId: integer, whichUnit: unit): boolean;
declare function UnitRemoveBuffBJ(buffcode: integer, whichUnit: unit): boolean;
declare function UnitRemoveBuffsBJ(buffType: integer, whichUnit: unit): void;
declare function UnitRemoveBuffsExBJ(polarity: integer, resist: integer, whichUnit: unit, bTLife: boolean, bAura: boolean): void;
declare function UnitRemoveItemFromSlotSwapped(itemSlot: integer, whichHero: unit): Option<item>;
declare function UnitRemoveItemSwapped(whichItem: item, whichHero: unit): void;
declare function UnitRemoveTypeBJ(whichType: unittype, whichUnit: unit): boolean;
declare function UnitSetCanSleepBJ(whichUnit: unit, canSleep: boolean): void;
declare function UnitSetUsesAltIconBJ(flag: boolean, whichUnit: unit): void;
declare function UnitShareVisionBJ(share: boolean, whichUnit: unit, whichPlayer: player): void;
declare function UnitSuspendDecayBJ(suspend: boolean, whichUnit: unit): void;
declare function UnitUseItemDestructable(whichUnit: unit, whichItem: item, target: widget): boolean;
declare function UnitUseItemPointLoc(whichUnit: unit, whichItem: item, loc: location): boolean;
declare function UnitWakeUpBJ(whichUnit: unit): void;
declare function UnlockGameSpeedBJ(): void;
declare function UpdateEachStockBuilding(iType: itemtype, iLevel: integer): void;
declare function UpdateEachStockBuildingEnum(): void;
declare function UpdateStockAvailability(whichItem: item): void;
declare function UseTimeOfDayBJ(flag: boolean): void;
declare function VolumeGroupResetBJ(): void;
declare function VolumeGroupResetImmediateBJ(): void;
declare function VolumeGroupSetVolumeBJ(vgroup: volumegroup, percent: real): void;
declare function VolumeGroupSetVolumeForPlayerBJ(whichPlayer: player, vgroup: volumegroup, scale: real): void;
declare function WaitForSoundBJ(soundHandle: sound, offset: real): void;
declare function WaitTransmissionDuration(soundHandle: sound, timeType: integer, timeVal: real): void;
declare function WakePlayerUnits(whichPlayer: player): void;
declare function WakePlayerUnitsEnum(): void;
declare function WaygateActivateBJ(activate: boolean, waygate: unit): void;
declare function WaygateGetDestinationLocBJ(waygate: unit): Option<location>;
declare function WaygateIsActiveBJ(waygate: unit): boolean;
declare function WaygateSetDestinationLocBJ(waygate: unit, loc: location): void;
declare function WidgetDropItem(inWidget: widget, inItemID: integer): Option<item>;
